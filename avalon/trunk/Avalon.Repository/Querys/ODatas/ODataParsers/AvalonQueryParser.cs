//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.5.0.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.5.0.2 Querys\\NdQuery.g3 2013-10-08 10:23:05

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace Avalon.Framework.Querys
{
    [System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.5.0.2")]
    [System.CLSCompliant(false)]
    public partial class AvalonQueryParser : Antlr.Runtime.Parser
    {
        internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "ALLPAGES", "AND", "ASC", "AVERAGE", "BOOL", "BYTE", "COUNT", "DATETIME", "DESC", "DOUBLE", "ENDSWITH", "EQUALS", "ESC_SEQ", "FILTER", "GREATERTHAN", "GREATERTHANOREQUAL", "GUID", "HEX_DIGIT", "HEX_PAIR", "IDENTIFIER", "IN", "INLINECOUNT", "INT", "LESSTHAN", "LESSTHANOREQUAL", "LONG", "MAX", "MIN", "NEWLINE", "NONE", "NOT", "NOTEQUALS", "NOTIN", "NULL", "OCTAL_ESC", "OR", "ORDERBY", "SELECT", "SINGLE", "SKIP", "SPACE", "STARTSWITH", "STRING", "SUBSTRINGOF", "SUM", "TOP", "UNICODE_ESC", "'&'", "'('", "')'", "','"
	};
        public const int EOF = -1;
        public const int ALLPAGES = 4;
        public const int AND = 5;
        public const int ASC = 6;
        public const int AVERAGE = 7;
        public const int BOOL = 8;
        public const int BYTE = 9;
        public const int COUNT = 10;
        public const int DATETIME = 11;
        public const int DESC = 12;
        public const int DOUBLE = 13;
        public const int ENDSWITH = 14;
        public const int EQUALS = 15;
        public const int ESC_SEQ = 16;
        public const int FILTER = 17;
        public const int GREATERTHAN = 18;
        public const int GREATERTHANOREQUAL = 19;
        public const int GUID = 20;
        public const int HEX_DIGIT = 21;
        public const int HEX_PAIR = 22;
        public const int IDENTIFIER = 23;
        public const int IN = 24;
        public const int INLINECOUNT = 25;
        public const int INT = 26;
        public const int LESSTHAN = 27;
        public const int LESSTHANOREQUAL = 28;
        public const int LONG = 29;
        public const int MAX = 30;
        public const int MIN = 31;
        public const int NEWLINE = 32;
        public const int NONE = 33;
        public const int NOT = 34;
        public const int NOTEQUALS = 35;
        public const int NOTIN = 36;
        public const int NULL = 37;
        public const int OCTAL_ESC = 38;
        public const int OR = 39;
        public const int ORDERBY = 40;
        public const int SELECT = 41;
        public const int SINGLE = 42;
        public const int SKIP = 43;
        public const int SPACE = 44;
        public const int STARTSWITH = 45;
        public const int STRING = 46;
        public const int SUBSTRINGOF = 47;
        public const int SUM = 48;
        public const int TOP = 49;
        public const int UNICODE_ESC = 50;
        public const int T__51 = 51;
        public const int T__52 = 52;
        public const int T__53 = 53;
        public const int T__54 = 54;

        public AvalonQueryParser(ITokenStream input)
            : this(input, new RecognizerSharedState())
        {
        }
        public AvalonQueryParser(ITokenStream input, RecognizerSharedState state)
            : base(input, state)
        {
            ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
            CreateTreeAdaptor(ref treeAdaptor);
            TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();
            OnCreated();
        }
        // Implement this function in your helper file to use a custom tree adaptor
        partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

        private ITreeAdaptor adaptor;

        public ITreeAdaptor TreeAdaptor
        {
            get
            {
                return adaptor;
            }

            set
            {
                this.adaptor = value;
            }
        }

        public override string[] TokenNames { get { return AvalonQueryParser.tokenNames; } }
        public override string GrammarFileName { get { return "Querys\\NdQuery.g3"; } }


        partial void OnCreated();
        partial void EnterRule(string ruleName, int ruleIndex);
        partial void LeaveRule(string ruleName, int ruleIndex);

        #region Rules
        partial void EnterRule_prog();
        partial void LeaveRule_prog();
        // $ANTLR start "prog"
        // Querys\\NdQuery.g3:18:1: public prog : ( param ( '&' ! param )* )* ;
        [GrammarRule("prog")]
        public AstParserRuleReturnScope<CommonTree, CommonToken> prog()
        {
            EnterRule_prog();
            EnterRule("prog", 1);
            TraceIn("prog", 1);
            AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
            retval.Start = (CommonToken)input.LT(1);

            CommonTree root_0 = default(CommonTree);

            CommonToken char_literal2 = default(CommonToken);
            AstParserRuleReturnScope<CommonTree, CommonToken> param1 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
            AstParserRuleReturnScope<CommonTree, CommonToken> param3 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

            CommonTree char_literal2_tree = default(CommonTree);
            try
            {
                DebugEnterRule(GrammarFileName, "prog");
                DebugLocation(18, 25);
                try
                {
                    // Querys\\NdQuery.g3:19:2: ( ( param ( '&' ! param )* )* )
                    DebugEnterAlt(1);
                    // Querys\\NdQuery.g3:19:4: ( param ( '&' ! param )* )*
                    {
                        root_0 = (CommonTree)adaptor.Nil();

                        DebugLocation(19, 4);
                        // Querys\\NdQuery.g3:19:4: ( param ( '&' ! param )* )*
                        try
                        {
                            DebugEnterSubRule(2);
                            while (true)
                            {
                                int alt2 = 2;
                                try
                                {
                                    DebugEnterDecision(2, false);
                                    int LA2_1 = input.LA(1);

                                    if ((LA2_1 == FILTER || LA2_1 == INLINECOUNT || (LA2_1 >= ORDERBY && LA2_1 <= SELECT) || LA2_1 == SKIP || LA2_1 == TOP))
                                    {
                                        alt2 = 1;
                                    }


                                }
                                finally { DebugExitDecision(2); }
                                switch (alt2)
                                {
                                    case 1:
                                        DebugEnterAlt(1);
                                        // Querys\\NdQuery.g3:19:5: param ( '&' ! param )*
                                        {
                                            DebugLocation(19, 5);
                                            PushFollow(Follow._param_in_prog73);
                                            param1 = param();
                                            PopFollow();

                                            adaptor.AddChild(root_0, param1.Tree);
                                            DebugLocation(19, 11);
                                            // Querys\\NdQuery.g3:19:11: ( '&' ! param )*
                                            try
                                            {
                                                DebugEnterSubRule(1);
                                                while (true)
                                                {
                                                    int alt1 = 2;
                                                    try
                                                    {
                                                        DebugEnterDecision(1, false);
                                                        int LA1_1 = input.LA(1);

                                                        if ((LA1_1 == 51))
                                                        {
                                                            alt1 = 1;
                                                        }


                                                    }
                                                    finally { DebugExitDecision(1); }
                                                    switch (alt1)
                                                    {
                                                        case 1:
                                                            DebugEnterAlt(1);
                                                            // Querys\\NdQuery.g3:19:12: '&' ! param
                                                            {
                                                                DebugLocation(19, 15);
                                                                char_literal2 = (CommonToken)Match(input, 51, Follow._51_in_prog76);
                                                                DebugLocation(19, 17);
                                                                PushFollow(Follow._param_in_prog79);
                                                                param3 = param();
                                                                PopFollow();

                                                                adaptor.AddChild(root_0, param3.Tree);

                                                            }
                                                            break;

                                                        default:
                                                            goto loop1;
                                                    }
                                                }

                                            loop1:
                                                ;

                                            }
                                            finally { DebugExitSubRule(1); }


                                        }
                                        break;

                                    default:
                                        goto loop2;
                                }
                            }

                        loop2:
                            ;

                        }
                        finally { DebugExitSubRule(2); }


                    }

                    retval.Stop = (CommonToken)input.LT(-1);

                    retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

                }
                catch (RecognitionException re)
                {
                    ReportError(re);
                    Recover(input, re);
                    retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

                }
                finally
                {
                    TraceOut("prog", 1);
                    LeaveRule("prog", 1);
                    LeaveRule_prog();
                }
                DebugLocation(19, 25);
            }
            finally { DebugExitRule(GrammarFileName, "prog"); }
            return retval;

        }
        // $ANTLR end "prog"

        partial void EnterRule_param();
        partial void LeaveRule_param();
        // $ANTLR start "param"
        // Querys\\NdQuery.g3:21:1: param : ( orderby | top | skip | filter | select | inlinecount ) ;
        [GrammarRule("param")]
        private AstParserRuleReturnScope<CommonTree, CommonToken> param()
        {
            EnterRule_param();
            EnterRule("param", 2);
            TraceIn("param", 2);
            AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
            retval.Start = (CommonToken)input.LT(1);

            CommonTree root_0 = default(CommonTree);

            AstParserRuleReturnScope<CommonTree, CommonToken> orderby4 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
            AstParserRuleReturnScope<CommonTree, CommonToken> top5 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
            AstParserRuleReturnScope<CommonTree, CommonToken> skip6 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
            AstParserRuleReturnScope<CommonTree, CommonToken> filter7 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
            AstParserRuleReturnScope<CommonTree, CommonToken> select8 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
            AstParserRuleReturnScope<CommonTree, CommonToken> inlinecount9 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

            try
            {
                DebugEnterRule(GrammarFileName, "param");
                DebugLocation(21, 62);
                try
                {
                    // Querys\\NdQuery.g3:21:7: ( ( orderby | top | skip | filter | select | inlinecount ) )
                    DebugEnterAlt(1);
                    // Querys\\NdQuery.g3:21:9: ( orderby | top | skip | filter | select | inlinecount )
                    {
                        root_0 = (CommonTree)adaptor.Nil();

                        DebugLocation(21, 9);
                        // Querys\\NdQuery.g3:21:9: ( orderby | top | skip | filter | select | inlinecount )
                        int alt3 = 6;
                        try
                        {
                            DebugEnterSubRule(3);
                            try
                            {
                                DebugEnterDecision(3, false);
                                switch (input.LA(1))
                                {
                                    case ORDERBY:
                                        {
                                            alt3 = 1;
                                        }
                                        break;
                                    case TOP:
                                        {
                                            alt3 = 2;
                                        }
                                        break;
                                    case SKIP:
                                        {
                                            alt3 = 3;
                                        }
                                        break;
                                    case FILTER:
                                        {
                                            alt3 = 4;
                                        }
                                        break;
                                    case SELECT:
                                        {
                                            alt3 = 5;
                                        }
                                        break;
                                    case INLINECOUNT:
                                        {
                                            alt3 = 6;
                                        }
                                        break;
                                    default:
                                        {
                                            NoViableAltException nvae = new NoViableAltException("", 3, 0, input, 1);
                                            DebugRecognitionException(nvae);
                                            throw nvae;
                                        }
                                }

                            }
                            finally { DebugExitDecision(3); }
                            switch (alt3)
                            {
                                case 1:
                                    DebugEnterAlt(1);
                                    // Querys\\NdQuery.g3:21:10: orderby
                                    {
                                        DebugLocation(21, 10);
                                        PushFollow(Follow._orderby_in_param92);
                                        orderby4 = orderby();
                                        PopFollow();

                                        adaptor.AddChild(root_0, orderby4.Tree);

                                    }
                                    break;
                                case 2:
                                    DebugEnterAlt(2);
                                    // Querys\\NdQuery.g3:21:20: top
                                    {
                                        DebugLocation(21, 20);
                                        PushFollow(Follow._top_in_param96);
                                        top5 = top();
                                        PopFollow();

                                        adaptor.AddChild(root_0, top5.Tree);

                                    }
                                    break;
                                case 3:
                                    DebugEnterAlt(3);
                                    // Querys\\NdQuery.g3:21:26: skip
                                    {
                                        DebugLocation(21, 26);
                                        PushFollow(Follow._skip_in_param100);
                                        skip6 = skip();
                                        PopFollow();

                                        adaptor.AddChild(root_0, skip6.Tree);

                                    }
                                    break;
                                case 4:
                                    DebugEnterAlt(4);
                                    // Querys\\NdQuery.g3:21:33: filter
                                    {
                                        DebugLocation(21, 33);
                                        PushFollow(Follow._filter_in_param104);
                                        filter7 = filter();
                                        PopFollow();

                                        adaptor.AddChild(root_0, filter7.Tree);

                                    }
                                    break;
                                case 5:
                                    DebugEnterAlt(5);
                                    // Querys\\NdQuery.g3:21:42: select
                                    {
                                        DebugLocation(21, 42);
                                        PushFollow(Follow._select_in_param108);
                                        select8 = select();
                                        PopFollow();

                                        adaptor.AddChild(root_0, select8.Tree);

                                    }
                                    break;
                                case 6:
                                    DebugEnterAlt(6);
                                    // Querys\\NdQuery.g3:21:51: inlinecount
                                    {
                                        DebugLocation(21, 51);
                                        PushFollow(Follow._inlinecount_in_param112);
                                        inlinecount9 = inlinecount();
                                        PopFollow();

                                        adaptor.AddChild(root_0, inlinecount9.Tree);

                                    }
                                    break;

                            }
                        }
                        finally { DebugExitSubRule(3); }


                    }

                    retval.Stop = (CommonToken)input.LT(-1);

                    retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

                }
                catch (RecognitionException re)
                {
                    ReportError(re);
                    Recover(input, re);
                    retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

                }
                finally
                {
                    TraceOut("param", 2);
                    LeaveRule("param", 2);
                    LeaveRule_param();
                }
                DebugLocation(21, 62);
            }
            finally { DebugExitRule(GrammarFileName, "param"); }
            return retval;

        }
        // $ANTLR end "param"

        partial void EnterRule_skip();
        partial void LeaveRule_skip();
        // $ANTLR start "skip"
        // Querys\\NdQuery.g3:23:1: skip : SKIP ^ ( INT )+ ;
        [GrammarRule("skip")]
        private AstParserRuleReturnScope<CommonTree, CommonToken> skip()
        {
            EnterRule_skip();
            EnterRule("skip", 3);
            TraceIn("skip", 3);
            AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
            retval.Start = (CommonToken)input.LT(1);

            CommonTree root_0 = default(CommonTree);

            CommonToken SKIP10 = default(CommonToken);
            CommonToken INT11 = default(CommonToken);

            CommonTree SKIP10_tree = default(CommonTree);
            CommonTree INT11_tree = default(CommonTree);
            try
            {
                DebugEnterRule(GrammarFileName, "skip");
                DebugLocation(23, 13);
                try
                {
                    // Querys\\NdQuery.g3:24:2: ( SKIP ^ ( INT )+ )
                    DebugEnterAlt(1);
                    // Querys\\NdQuery.g3:24:4: SKIP ^ ( INT )+
                    {
                        root_0 = (CommonTree)adaptor.Nil();

                        DebugLocation(24, 8);
                        SKIP10 = (CommonToken)Match(input, SKIP, Follow._SKIP_in_skip123);
                        SKIP10_tree = (CommonTree)adaptor.Create(SKIP10);
                        root_0 = (CommonTree)adaptor.BecomeRoot(SKIP10_tree, root_0);
                        DebugLocation(24, 10);
                        // Querys\\NdQuery.g3:24:10: ( INT )+
                        int cnt4 = 0;
                        try
                        {
                            DebugEnterSubRule(4);
                            while (true)
                            {
                                int alt4 = 2;
                                try
                                {
                                    DebugEnterDecision(4, false);
                                    int LA4_1 = input.LA(1);

                                    if ((LA4_1 == INT))
                                    {
                                        alt4 = 1;
                                    }


                                }
                                finally { DebugExitDecision(4); }
                                switch (alt4)
                                {
                                    case 1:
                                        DebugEnterAlt(1);
                                        // Querys\\NdQuery.g3:24:10: INT
                                        {
                                            DebugLocation(24, 10);
                                            INT11 = (CommonToken)Match(input, INT, Follow._INT_in_skip126);
                                            INT11_tree = (CommonTree)adaptor.Create(INT11);
                                            adaptor.AddChild(root_0, INT11_tree);

                                        }
                                        break;

                                    default:
                                        if (cnt4 >= 1)
                                            goto loop4;

                                        EarlyExitException eee4 = new EarlyExitException(4, input);
                                        DebugRecognitionException(eee4);
                                        throw eee4;
                                }
                                cnt4++;
                            }
                        loop4:
                            ;

                        }
                        finally { DebugExitSubRule(4); }


                    }

                    retval.Stop = (CommonToken)input.LT(-1);

                    retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

                }
                catch (RecognitionException re)
                {
                    ReportError(re);
                    Recover(input, re);
                    retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

                }
                finally
                {
                    TraceOut("skip", 3);
                    LeaveRule("skip", 3);
                    LeaveRule_skip();
                }
                DebugLocation(24, 13);
            }
            finally { DebugExitRule(GrammarFileName, "skip"); }
            return retval;

        }
        // $ANTLR end "skip"

        partial void EnterRule_top();
        partial void LeaveRule_top();
        // $ANTLR start "top"
        // Querys\\NdQuery.g3:26:1: top : TOP ^ ( INT )+ ;
        [GrammarRule("top")]
        private AstParserRuleReturnScope<CommonTree, CommonToken> top()
        {
            EnterRule_top();
            EnterRule("top", 4);
            TraceIn("top", 4);
            AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
            retval.Start = (CommonToken)input.LT(1);

            CommonTree root_0 = default(CommonTree);

            CommonToken TOP12 = default(CommonToken);
            CommonToken INT13 = default(CommonToken);

            CommonTree TOP12_tree = default(CommonTree);
            CommonTree INT13_tree = default(CommonTree);
            try
            {
                DebugEnterRule(GrammarFileName, "top");
                DebugLocation(26, 12);
                try
                {
                    // Querys\\NdQuery.g3:27:2: ( TOP ^ ( INT )+ )
                    DebugEnterAlt(1);
                    // Querys\\NdQuery.g3:27:4: TOP ^ ( INT )+
                    {
                        root_0 = (CommonTree)adaptor.Nil();

                        DebugLocation(27, 7);
                        TOP12 = (CommonToken)Match(input, TOP, Follow._TOP_in_top137);
                        TOP12_tree = (CommonTree)adaptor.Create(TOP12);
                        root_0 = (CommonTree)adaptor.BecomeRoot(TOP12_tree, root_0);
                        DebugLocation(27, 9);
                        // Querys\\NdQuery.g3:27:9: ( INT )+
                        int cnt5 = 0;
                        try
                        {
                            DebugEnterSubRule(5);
                            while (true)
                            {
                                int alt5 = 2;
                                try
                                {
                                    DebugEnterDecision(5, false);
                                    int LA5_1 = input.LA(1);

                                    if ((LA5_1 == INT))
                                    {
                                        alt5 = 1;
                                    }


                                }
                                finally { DebugExitDecision(5); }
                                switch (alt5)
                                {
                                    case 1:
                                        DebugEnterAlt(1);
                                        // Querys\\NdQuery.g3:27:9: INT
                                        {
                                            DebugLocation(27, 9);
                                            INT13 = (CommonToken)Match(input, INT, Follow._INT_in_top140);
                                            INT13_tree = (CommonTree)adaptor.Create(INT13);
                                            adaptor.AddChild(root_0, INT13_tree);

                                        }
                                        break;

                                    default:
                                        if (cnt5 >= 1)
                                            goto loop5;

                                        EarlyExitException eee5 = new EarlyExitException(5, input);
                                        DebugRecognitionException(eee5);
                                        throw eee5;
                                }
                                cnt5++;
                            }
                        loop5:
                            ;

                        }
                        finally { DebugExitSubRule(5); }


                    }

                    retval.Stop = (CommonToken)input.LT(-1);

                    retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

                }
                catch (RecognitionException re)
                {
                    ReportError(re);
                    Recover(input, re);
                    retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

                }
                finally
                {
                    TraceOut("top", 4);
                    LeaveRule("top", 4);
                    LeaveRule_top();
                }
                DebugLocation(27, 12);
            }
            finally { DebugExitRule(GrammarFileName, "top"); }
            return retval;

        }
        // $ANTLR end "top"

        partial void EnterRule_filter();
        partial void LeaveRule_filter();
        // $ANTLR start "filter"
        // Querys\\NdQuery.g3:29:1: filter : FILTER ^ filterexpression[false] ;
        [GrammarRule("filter")]
        private AstParserRuleReturnScope<CommonTree, CommonToken> filter()
        {
            EnterRule_filter();
            EnterRule("filter", 5);
            TraceIn("filter", 5);
            AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
            retval.Start = (CommonToken)input.LT(1);

            CommonTree root_0 = default(CommonTree);

            CommonToken FILTER14 = default(CommonToken);
            AstParserRuleReturnScope<CommonTree, CommonToken> filterexpression15 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

            CommonTree FILTER14_tree = default(CommonTree);
            try
            {
                DebugEnterRule(GrammarFileName, "filter");
                DebugLocation(29, 34);
                try
                {
                    // Querys\\NdQuery.g3:30:2: ( FILTER ^ filterexpression[false] )
                    DebugEnterAlt(1);
                    // Querys\\NdQuery.g3:30:4: FILTER ^ filterexpression[false]
                    {
                        root_0 = (CommonTree)adaptor.Nil();

                        DebugLocation(30, 10);
                        FILTER14 = (CommonToken)Match(input, FILTER, Follow._FILTER_in_filter151);
                        FILTER14_tree = (CommonTree)adaptor.Create(FILTER14);
                        root_0 = (CommonTree)adaptor.BecomeRoot(FILTER14_tree, root_0);
                        DebugLocation(30, 12);
                        PushFollow(Follow._filterexpression_in_filter154);
                        filterexpression15 = filterexpression(false);
                        PopFollow();

                        adaptor.AddChild(root_0, filterexpression15.Tree);

                    }

                    retval.Stop = (CommonToken)input.LT(-1);

                    retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

                }
                catch (RecognitionException re)
                {
                    ReportError(re);
                    Recover(input, re);
                    retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

                }
                finally
                {
                    TraceOut("filter", 5);
                    LeaveRule("filter", 5);
                    LeaveRule_filter();
                }
                DebugLocation(30, 34);
            }
            finally { DebugExitRule(GrammarFileName, "filter"); }
            return retval;

        }
        // $ANTLR end "filter"

        partial void EnterRule_select();
        partial void LeaveRule_select();
        // $ANTLR start "select"
        // Querys\\NdQuery.g3:32:1: select : SELECT ^ propertyname ( ( SPACE )? ',' ( SPACE )? propertyname )* ;
        [GrammarRule("select")]
        private AstParserRuleReturnScope<CommonTree, CommonToken> select()
        {
            EnterRule_select();
            EnterRule("select", 6);
            TraceIn("select", 6);
            AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
            retval.Start = (CommonToken)input.LT(1);

            CommonTree root_0 = default(CommonTree);

            CommonToken SELECT16 = default(CommonToken);
            CommonToken SPACE18 = default(CommonToken);
            CommonToken char_literal19 = default(CommonToken);
            CommonToken SPACE20 = default(CommonToken);
            AstParserRuleReturnScope<CommonTree, CommonToken> propertyname17 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
            AstParserRuleReturnScope<CommonTree, CommonToken> propertyname21 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

            CommonTree SELECT16_tree = default(CommonTree);
            CommonTree SPACE18_tree = default(CommonTree);
            CommonTree char_literal19_tree = default(CommonTree);
            CommonTree SPACE20_tree = default(CommonTree);
            try
            {
                DebugEnterRule(GrammarFileName, "select");
                DebugLocation(32, 57);
                try
                {
                    // Querys\\NdQuery.g3:33:2: ( SELECT ^ propertyname ( ( SPACE )? ',' ( SPACE )? propertyname )* )
                    DebugEnterAlt(1);
                    // Querys\\NdQuery.g3:33:4: SELECT ^ propertyname ( ( SPACE )? ',' ( SPACE )? propertyname )*
                    {
                        root_0 = (CommonTree)adaptor.Nil();

                        DebugLocation(33, 10);
                        SELECT16 = (CommonToken)Match(input, SELECT, Follow._SELECT_in_select165);
                        SELECT16_tree = (CommonTree)adaptor.Create(SELECT16);
                        root_0 = (CommonTree)adaptor.BecomeRoot(SELECT16_tree, root_0);
                        DebugLocation(33, 12);
                        PushFollow(Follow._propertyname_in_select168);
                        propertyname17 = propertyname();
                        PopFollow();

                        adaptor.AddChild(root_0, propertyname17.Tree);
                        DebugLocation(33, 25);
                        // Querys\\NdQuery.g3:33:25: ( ( SPACE )? ',' ( SPACE )? propertyname )*
                        try
                        {
                            DebugEnterSubRule(8);
                            while (true)
                            {
                                int alt8 = 2;
                                try
                                {
                                    DebugEnterDecision(8, false);
                                    int LA8_1 = input.LA(1);

                                    if ((LA8_1 == SPACE || LA8_1 == 54))
                                    {
                                        alt8 = 1;
                                    }


                                }
                                finally { DebugExitDecision(8); }
                                switch (alt8)
                                {
                                    case 1:
                                        DebugEnterAlt(1);
                                        // Querys\\NdQuery.g3:33:26: ( SPACE )? ',' ( SPACE )? propertyname
                                        {
                                            DebugLocation(33, 26);
                                            // Querys\\NdQuery.g3:33:26: ( SPACE )?
                                            int alt6 = 2;
                                            try
                                            {
                                                DebugEnterSubRule(6);
                                                try
                                                {
                                                    DebugEnterDecision(6, false);
                                                    int LA6_1 = input.LA(1);

                                                    if ((LA6_1 == SPACE))
                                                    {
                                                        alt6 = 1;
                                                    }
                                                }
                                                finally { DebugExitDecision(6); }
                                                switch (alt6)
                                                {
                                                    case 1:
                                                        DebugEnterAlt(1);
                                                        // Querys\\NdQuery.g3:33:26: SPACE
                                                        {
                                                            DebugLocation(33, 26);
                                                            SPACE18 = (CommonToken)Match(input, SPACE, Follow._SPACE_in_select171);
                                                            SPACE18_tree = (CommonTree)adaptor.Create(SPACE18);
                                                            adaptor.AddChild(root_0, SPACE18_tree);

                                                        }
                                                        break;

                                                }
                                            }
                                            finally { DebugExitSubRule(6); }

                                            DebugLocation(33, 33);
                                            char_literal19 = (CommonToken)Match(input, 54, Follow._54_in_select174);
                                            char_literal19_tree = (CommonTree)adaptor.Create(char_literal19);
                                            adaptor.AddChild(root_0, char_literal19_tree);
                                            DebugLocation(33, 37);
                                            // Querys\\NdQuery.g3:33:37: ( SPACE )?
                                            int alt7 = 2;
                                            try
                                            {
                                                DebugEnterSubRule(7);
                                                try
                                                {
                                                    DebugEnterDecision(7, false);
                                                    int LA7_1 = input.LA(1);

                                                    if ((LA7_1 == SPACE))
                                                    {
                                                        alt7 = 1;
                                                    }
                                                }
                                                finally { DebugExitDecision(7); }
                                                switch (alt7)
                                                {
                                                    case 1:
                                                        DebugEnterAlt(1);
                                                        // Querys\\NdQuery.g3:33:37: SPACE
                                                        {
                                                            DebugLocation(33, 37);
                                                            SPACE20 = (CommonToken)Match(input, SPACE, Follow._SPACE_in_select176);
                                                            SPACE20_tree = (CommonTree)adaptor.Create(SPACE20);
                                                            adaptor.AddChild(root_0, SPACE20_tree);

                                                        }
                                                        break;

                                                }
                                            }
                                            finally { DebugExitSubRule(7); }

                                            DebugLocation(33, 44);
                                            PushFollow(Follow._propertyname_in_select179);
                                            propertyname21 = propertyname();
                                            PopFollow();

                                            adaptor.AddChild(root_0, propertyname21.Tree);

                                        }
                                        break;

                                    default:
                                        goto loop8;
                                }
                            }

                        loop8:
                            ;

                        }
                        finally { DebugExitSubRule(8); }


                    }

                    retval.Stop = (CommonToken)input.LT(-1);

                    retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

                }
                catch (RecognitionException re)
                {
                    ReportError(re);
                    Recover(input, re);
                    retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

                }
                finally
                {
                    TraceOut("select", 6);
                    LeaveRule("select", 6);
                    LeaveRule_select();
                }
                DebugLocation(33, 57);
            }
            finally { DebugExitRule(GrammarFileName, "select"); }
            return retval;

        }
        // $ANTLR end "select"

        partial void EnterRule_inlinecount();
        partial void LeaveRule_inlinecount();
        // $ANTLR start "inlinecount"
        // Querys\\NdQuery.g3:36:1: inlinecount : ( INLINECOUNT ^ ALLPAGES | INLINECOUNT NONE ->);
        [GrammarRule("inlinecount")]
        private AstParserRuleReturnScope<CommonTree, CommonToken> inlinecount()
        {
            EnterRule_inlinecount();
            EnterRule("inlinecount", 7);
            TraceIn("inlinecount", 7);
            AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
            retval.Start = (CommonToken)input.LT(1);

            CommonTree root_0 = default(CommonTree);

            CommonToken INLINECOUNT22 = default(CommonToken);
            CommonToken ALLPAGES23 = default(CommonToken);
            CommonToken INLINECOUNT24 = default(CommonToken);
            CommonToken NONE25 = default(CommonToken);

            CommonTree INLINECOUNT22_tree = default(CommonTree);
            CommonTree ALLPAGES23_tree = default(CommonTree);
            CommonTree INLINECOUNT24_tree = default(CommonTree);
            CommonTree NONE25_tree = default(CommonTree);
            RewriteRuleITokenStream stream_INLINECOUNT = new RewriteRuleITokenStream(adaptor, "token INLINECOUNT");
            RewriteRuleITokenStream stream_NONE = new RewriteRuleITokenStream(adaptor, "token NONE");
            try
            {
                DebugEnterRule(GrammarFileName, "inlinecount");
                DebugLocation(36, 22);
                try
                {
                    // Querys\\NdQuery.g3:37:2: ( INLINECOUNT ^ ALLPAGES | INLINECOUNT NONE ->)
                    int alt9 = 2;
                    try
                    {
                        DebugEnterDecision(9, false);
                        int LA9_1 = input.LA(1);

                        if ((LA9_1 == INLINECOUNT))
                        {
                            int LA9_2 = input.LA(2);

                            if ((LA9_2 == ALLPAGES))
                            {
                                alt9 = 1;
                            }
                            else if ((LA9_2 == NONE))
                            {
                                alt9 = 2;
                            }
                            else
                            {
                                NoViableAltException nvae = new NoViableAltException("", 9, 1, input, 2);
                                DebugRecognitionException(nvae);
                                throw nvae;
                            }
                        }
                        else
                        {
                            NoViableAltException nvae = new NoViableAltException("", 9, 0, input, 1);
                            DebugRecognitionException(nvae);
                            throw nvae;
                        }
                    }
                    finally { DebugExitDecision(9); }
                    switch (alt9)
                    {
                        case 1:
                            DebugEnterAlt(1);
                            // Querys\\NdQuery.g3:37:4: INLINECOUNT ^ ALLPAGES
                            {
                                root_0 = (CommonTree)adaptor.Nil();

                                DebugLocation(37, 15);
                                INLINECOUNT22 = (CommonToken)Match(input, INLINECOUNT, Follow._INLINECOUNT_in_inlinecount195);
                                INLINECOUNT22_tree = (CommonTree)adaptor.Create(INLINECOUNT22);
                                root_0 = (CommonTree)adaptor.BecomeRoot(INLINECOUNT22_tree, root_0);
                                DebugLocation(37, 17);
                                ALLPAGES23 = (CommonToken)Match(input, ALLPAGES, Follow._ALLPAGES_in_inlinecount198);
                                ALLPAGES23_tree = (CommonTree)adaptor.Create(ALLPAGES23);
                                adaptor.AddChild(root_0, ALLPAGES23_tree);

                            }
                            break;
                        case 2:
                            DebugEnterAlt(2);
                            // Querys\\NdQuery.g3:38:4: INLINECOUNT NONE
                            {
                                DebugLocation(38, 4);
                                INLINECOUNT24 = (CommonToken)Match(input, INLINECOUNT, Follow._INLINECOUNT_in_inlinecount203);
                                stream_INLINECOUNT.Add(INLINECOUNT24);

                                DebugLocation(38, 16);
                                NONE25 = (CommonToken)Match(input, NONE, Follow._NONE_in_inlinecount205);
                                stream_NONE.Add(NONE25);



                                {
                                    // AST REWRITE
                                    // elements: 
                                    // token labels: 
                                    // rule labels: retval
                                    // token list labels: 
                                    // rule list labels: 
                                    // wildcard labels: 
                                    retval.Tree = root_0;
                                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.Tree : null);

                                    root_0 = (CommonTree)adaptor.Nil();
                                    // 38:21: ->
                                    {
                                        DebugLocation(38, 23);
                                        root_0 = null;
                                    }

                                    retval.Tree = root_0;
                                }

                            }
                            break;

                    }
                    retval.Stop = (CommonToken)input.LT(-1);

                    retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

                }
                catch (RecognitionException re)
                {
                    ReportError(re);
                    Recover(input, re);
                    retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

                }
                finally
                {
                    TraceOut("inlinecount", 7);
                    LeaveRule("inlinecount", 7);
                    LeaveRule_inlinecount();
                }
                DebugLocation(38, 22);
            }
            finally { DebugExitRule(GrammarFileName, "inlinecount"); }
            return retval;

        }
        // $ANTLR end "inlinecount"

        partial void EnterRule_filterexpression();
        partial void LeaveRule_filterexpression();
        // $ANTLR start "filterexpression"
        // Querys\\NdQuery.g3:40:1: filterexpression[bool subquery] : orexpression[subquery] ( SPACE ! OR ^ SPACE ! orexpression[subquery] )* ;
        [GrammarRule("filterexpression")]
        private AstParserRuleReturnScope<CommonTree, CommonToken> filterexpression(bool subquery)
        {
            EnterRule_filterexpression();
            EnterRule("filterexpression", 8);
            TraceIn("filterexpression", 8);
            AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
            retval.Start = (CommonToken)input.LT(1);

            CommonTree root_0 = default(CommonTree);

            CommonToken SPACE27 = default(CommonToken);
            CommonToken OR28 = default(CommonToken);
            CommonToken SPACE29 = default(CommonToken);
            AstParserRuleReturnScope<CommonTree, CommonToken> orexpression26 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
            AstParserRuleReturnScope<CommonTree, CommonToken> orexpression30 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

            CommonTree SPACE27_tree = default(CommonTree);
            CommonTree OR28_tree = default(CommonTree);
            CommonTree SPACE29_tree = default(CommonTree);
            try
            {
                DebugEnterRule(GrammarFileName, "filterexpression");
                DebugLocation(40, 69);
                try
                {
                    // Querys\\NdQuery.g3:41:2: ( orexpression[subquery] ( SPACE ! OR ^ SPACE ! orexpression[subquery] )* )
                    DebugEnterAlt(1);
                    // Querys\\NdQuery.g3:41:4: orexpression[subquery] ( SPACE ! OR ^ SPACE ! orexpression[subquery] )*
                    {
                        root_0 = (CommonTree)adaptor.Nil();

                        DebugLocation(41, 4);
                        PushFollow(Follow._orexpression_in_filterexpression217);
                        orexpression26 = orexpression(subquery);
                        PopFollow();

                        adaptor.AddChild(root_0, orexpression26.Tree);
                        DebugLocation(41, 27);
                        // Querys\\NdQuery.g3:41:27: ( SPACE ! OR ^ SPACE ! orexpression[subquery] )*
                        try
                        {
                            DebugEnterSubRule(10);
                            while (true)
                            {
                                int alt10 = 2;
                                try
                                {
                                    DebugEnterDecision(10, false);
                                    int LA10_1 = input.LA(1);

                                    if ((LA10_1 == SPACE))
                                    {
                                        alt10 = 1;
                                    }


                                }
                                finally { DebugExitDecision(10); }
                                switch (alt10)
                                {
                                    case 1:
                                        DebugEnterAlt(1);
                                        // Querys\\NdQuery.g3:41:28: SPACE ! OR ^ SPACE ! orexpression[subquery]
                                        {
                                            DebugLocation(41, 33);
                                            SPACE27 = (CommonToken)Match(input, SPACE, Follow._SPACE_in_filterexpression221);
                                            DebugLocation(41, 37);
                                            OR28 = (CommonToken)Match(input, OR, Follow._OR_in_filterexpression224);
                                            OR28_tree = (CommonTree)adaptor.Create(OR28);
                                            root_0 = (CommonTree)adaptor.BecomeRoot(OR28_tree, root_0);
                                            DebugLocation(41, 44);
                                            SPACE29 = (CommonToken)Match(input, SPACE, Follow._SPACE_in_filterexpression227);
                                            DebugLocation(41, 46);
                                            PushFollow(Follow._orexpression_in_filterexpression230);
                                            orexpression30 = orexpression(subquery);
                                            PopFollow();

                                            adaptor.AddChild(root_0, orexpression30.Tree);

                                        }
                                        break;

                                    default:
                                        goto loop10;
                                }
                            }

                        loop10:
                            ;

                        }
                        finally { DebugExitSubRule(10); }


                    }

                    retval.Stop = (CommonToken)input.LT(-1);

                    retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

                }
                catch (RecognitionException re)
                {
                    ReportError(re);
                    Recover(input, re);
                    retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

                }
                finally
                {
                    TraceOut("filterexpression", 8);
                    LeaveRule("filterexpression", 8);
                    LeaveRule_filterexpression();
                }
                DebugLocation(41, 69);
            }
            finally { DebugExitRule(GrammarFileName, "filterexpression"); }
            return retval;

        }
        // $ANTLR end "filterexpression"

        partial void EnterRule_orexpression();
        partial void LeaveRule_orexpression();
        // $ANTLR start "orexpression"
        // Querys\\NdQuery.g3:43:1: orexpression[bool subquery] : andexpression[subquery] ( SPACE ! AND ^ SPACE ! andexpression[subquery] )* ;
        [GrammarRule("orexpression")]
        private AstParserRuleReturnScope<CommonTree, CommonToken> orexpression(bool subquery)
        {
            EnterRule_orexpression();
            EnterRule("orexpression", 9);
            TraceIn("orexpression", 9);
            AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
            retval.Start = (CommonToken)input.LT(1);

            CommonTree root_0 = default(CommonTree);

            CommonToken SPACE32 = default(CommonToken);
            CommonToken AND33 = default(CommonToken);
            CommonToken SPACE34 = default(CommonToken);
            AstParserRuleReturnScope<CommonTree, CommonToken> andexpression31 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
            AstParserRuleReturnScope<CommonTree, CommonToken> andexpression35 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

            CommonTree SPACE32_tree = default(CommonTree);
            CommonTree AND33_tree = default(CommonTree);
            CommonTree SPACE34_tree = default(CommonTree);
            try
            {
                DebugEnterRule(GrammarFileName, "orexpression");
                DebugLocation(43, 72);
                try
                {
                    // Querys\\NdQuery.g3:44:2: ( andexpression[subquery] ( SPACE ! AND ^ SPACE ! andexpression[subquery] )* )
                    DebugEnterAlt(1);
                    // Querys\\NdQuery.g3:44:4: andexpression[subquery] ( SPACE ! AND ^ SPACE ! andexpression[subquery] )*
                    {
                        root_0 = (CommonTree)adaptor.Nil();

                        DebugLocation(44, 4);
                        PushFollow(Follow._andexpression_in_orexpression244);
                        andexpression31 = andexpression(subquery);
                        PopFollow();

                        adaptor.AddChild(root_0, andexpression31.Tree);
                        DebugLocation(44, 28);
                        // Querys\\NdQuery.g3:44:28: ( SPACE ! AND ^ SPACE ! andexpression[subquery] )*
                        try
                        {
                            DebugEnterSubRule(11);
                            while (true)
                            {
                                int alt11 = 2;
                                try
                                {
                                    DebugEnterDecision(11, false);
                                    int LA11_1 = input.LA(1);

                                    if ((LA11_1 == SPACE))
                                    {
                                        int LA11_2 = input.LA(2);

                                        if ((LA11_2 == AND))
                                        {
                                            alt11 = 1;
                                        }


                                    }


                                }
                                finally { DebugExitDecision(11); }
                                switch (alt11)
                                {
                                    case 1:
                                        DebugEnterAlt(1);
                                        // Querys\\NdQuery.g3:44:29: SPACE ! AND ^ SPACE ! andexpression[subquery]
                                        {
                                            DebugLocation(44, 34);
                                            SPACE32 = (CommonToken)Match(input, SPACE, Follow._SPACE_in_orexpression248);
                                            DebugLocation(44, 39);
                                            AND33 = (CommonToken)Match(input, AND, Follow._AND_in_orexpression251);
                                            AND33_tree = (CommonTree)adaptor.Create(AND33);
                                            root_0 = (CommonTree)adaptor.BecomeRoot(AND33_tree, root_0);
                                            DebugLocation(44, 46);
                                            SPACE34 = (CommonToken)Match(input, SPACE, Follow._SPACE_in_orexpression254);
                                            DebugLocation(44, 48);
                                            PushFollow(Follow._andexpression_in_orexpression257);
                                            andexpression35 = andexpression(subquery);
                                            PopFollow();

                                            adaptor.AddChild(root_0, andexpression35.Tree);

                                        }
                                        break;

                                    default:
                                        goto loop11;
                                }
                            }

                        loop11:
                            ;

                        }
                        finally { DebugExitSubRule(11); }


                    }

                    retval.Stop = (CommonToken)input.LT(-1);

                    retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

                }
                catch (RecognitionException re)
                {
                    ReportError(re);
                    Recover(input, re);
                    retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

                }
                finally
                {
                    TraceOut("orexpression", 9);
                    LeaveRule("orexpression", 9);
                    LeaveRule_orexpression();
                }
                DebugLocation(44, 72);
            }
            finally { DebugExitRule(GrammarFileName, "orexpression"); }
            return retval;

        }
        // $ANTLR end "orexpression"

        partial void EnterRule_andexpression();
        partial void LeaveRule_andexpression();
        // $ANTLR start "andexpression"
        // Querys\\NdQuery.g3:46:1: andexpression[bool subquery] : ( NOT ^ SPACE ( '(' filterexpression[subquery] ')' | booleanexpression[subquery] ) | ( '(' filterexpression[subquery] ')' | booleanexpression[subquery] ) );
        [GrammarRule("andexpression")]
        private AstParserRuleReturnScope<CommonTree, CommonToken> andexpression(bool subquery)
        {
            EnterRule_andexpression();
            EnterRule("andexpression", 10);
            TraceIn("andexpression", 10);
            AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
            retval.Start = (CommonToken)input.LT(1);

            CommonTree root_0 = default(CommonTree);

            CommonToken NOT36 = default(CommonToken);
            CommonToken SPACE37 = default(CommonToken);
            CommonToken char_literal38 = default(CommonToken);
            CommonToken char_literal40 = default(CommonToken);
            CommonToken char_literal42 = default(CommonToken);
            CommonToken char_literal44 = default(CommonToken);
            AstParserRuleReturnScope<CommonTree, CommonToken> filterexpression39 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
            AstParserRuleReturnScope<CommonTree, CommonToken> booleanexpression41 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
            AstParserRuleReturnScope<CommonTree, CommonToken> filterexpression43 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
            AstParserRuleReturnScope<CommonTree, CommonToken> booleanexpression45 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

            CommonTree NOT36_tree = default(CommonTree);
            CommonTree SPACE37_tree = default(CommonTree);
            CommonTree char_literal38_tree = default(CommonTree);
            CommonTree char_literal40_tree = default(CommonTree);
            CommonTree char_literal42_tree = default(CommonTree);
            CommonTree char_literal44_tree = default(CommonTree);
            try
            {
                DebugEnterRule(GrammarFileName, "andexpression");
                DebugLocation(46, 69);
                try
                {
                    // Querys\\NdQuery.g3:47:2: ( NOT ^ SPACE ( '(' filterexpression[subquery] ')' | booleanexpression[subquery] ) | ( '(' filterexpression[subquery] ')' | booleanexpression[subquery] ) )
                    int alt14 = 2;
                    try
                    {
                        DebugEnterDecision(14, false);
                        int LA14_1 = input.LA(1);

                        if ((LA14_1 == NOT))
                        {
                            alt14 = 1;
                        }
                        else if (((LA14_1 >= BOOL && LA14_1 <= BYTE) || LA14_1 == DATETIME || (LA14_1 >= DOUBLE && LA14_1 <= ENDSWITH) || LA14_1 == GUID || LA14_1 == IDENTIFIER || LA14_1 == INT || LA14_1 == LONG || LA14_1 == NULL || LA14_1 == SINGLE || (LA14_1 >= STARTSWITH && LA14_1 <= SUBSTRINGOF) || LA14_1 == 52))
                        {
                            alt14 = 2;
                        }
                        else
                        {
                            NoViableAltException nvae = new NoViableAltException("", 14, 0, input, 1);
                            DebugRecognitionException(nvae);
                            throw nvae;
                        }
                    }
                    finally { DebugExitDecision(14); }
                    switch (alt14)
                    {
                        case 1:
                            DebugEnterAlt(1);
                            // Querys\\NdQuery.g3:47:4: NOT ^ SPACE ( '(' filterexpression[subquery] ')' | booleanexpression[subquery] )
                            {
                                root_0 = (CommonTree)adaptor.Nil();

                                DebugLocation(47, 7);
                                NOT36 = (CommonToken)Match(input, NOT, Follow._NOT_in_andexpression271);
                                NOT36_tree = (CommonTree)adaptor.Create(NOT36);
                                root_0 = (CommonTree)adaptor.BecomeRoot(NOT36_tree, root_0);
                                DebugLocation(47, 9);
                                SPACE37 = (CommonToken)Match(input, SPACE, Follow._SPACE_in_andexpression274);
                                SPACE37_tree = (CommonTree)adaptor.Create(SPACE37);
                                adaptor.AddChild(root_0, SPACE37_tree);
                                DebugLocation(47, 15);
                                // Querys\\NdQuery.g3:47:15: ( '(' filterexpression[subquery] ')' | booleanexpression[subquery] )
                                int alt12 = 2;
                                try
                                {
                                    DebugEnterSubRule(12);
                                    try
                                    {
                                        DebugEnterDecision(12, false);
                                        int LA12_1 = input.LA(1);

                                        if ((LA12_1 == 52))
                                        {
                                            alt12 = 1;
                                        }
                                        else if (((LA12_1 >= BOOL && LA12_1 <= BYTE) || LA12_1 == DATETIME || (LA12_1 >= DOUBLE && LA12_1 <= ENDSWITH) || LA12_1 == GUID || LA12_1 == IDENTIFIER || LA12_1 == INT || LA12_1 == LONG || LA12_1 == NULL || LA12_1 == SINGLE || (LA12_1 >= STARTSWITH && LA12_1 <= SUBSTRINGOF)))
                                        {
                                            alt12 = 2;
                                        }
                                        else
                                        {
                                            NoViableAltException nvae = new NoViableAltException("", 12, 0, input, 1);
                                            DebugRecognitionException(nvae);
                                            throw nvae;
                                        }
                                    }
                                    finally { DebugExitDecision(12); }
                                    switch (alt12)
                                    {
                                        case 1:
                                            DebugEnterAlt(1);
                                            // Querys\\NdQuery.g3:47:16: '(' filterexpression[subquery] ')'
                                            {
                                                DebugLocation(47, 16);
                                                char_literal38 = (CommonToken)Match(input, 52, Follow._52_in_andexpression277);
                                                char_literal38_tree = (CommonTree)adaptor.Create(char_literal38);
                                                adaptor.AddChild(root_0, char_literal38_tree);
                                                DebugLocation(47, 20);
                                                PushFollow(Follow._filterexpression_in_andexpression279);
                                                filterexpression39 = filterexpression(subquery);
                                                PopFollow();

                                                adaptor.AddChild(root_0, filterexpression39.Tree);
                                                DebugLocation(47, 47);
                                                char_literal40 = (CommonToken)Match(input, 53, Follow._53_in_andexpression282);
                                                char_literal40_tree = (CommonTree)adaptor.Create(char_literal40);
                                                adaptor.AddChild(root_0, char_literal40_tree);

                                            }
                                            break;
                                        case 2:
                                            DebugEnterAlt(2);
                                            // Querys\\NdQuery.g3:47:53: booleanexpression[subquery]
                                            {
                                                DebugLocation(47, 53);
                                                PushFollow(Follow._booleanexpression_in_andexpression286);
                                                booleanexpression41 = booleanexpression(subquery);
                                                PopFollow();

                                                adaptor.AddChild(root_0, booleanexpression41.Tree);

                                            }
                                            break;

                                    }
                                }
                                finally { DebugExitSubRule(12); }


                            }
                            break;
                        case 2:
                            DebugEnterAlt(2);
                            // Querys\\NdQuery.g3:48:4: ( '(' filterexpression[subquery] ')' | booleanexpression[subquery] )
                            {
                                root_0 = (CommonTree)adaptor.Nil();

                                DebugLocation(48, 4);
                                // Querys\\NdQuery.g3:48:4: ( '(' filterexpression[subquery] ')' | booleanexpression[subquery] )
                                int alt13 = 2;
                                try
                                {
                                    DebugEnterSubRule(13);
                                    try
                                    {
                                        DebugEnterDecision(13, false);
                                        int LA13_1 = input.LA(1);

                                        if ((LA13_1 == 52))
                                        {
                                            alt13 = 1;
                                        }
                                        else if (((LA13_1 >= BOOL && LA13_1 <= BYTE) || LA13_1 == DATETIME || (LA13_1 >= DOUBLE && LA13_1 <= ENDSWITH) || LA13_1 == GUID || LA13_1 == IDENTIFIER || LA13_1 == INT || LA13_1 == LONG || LA13_1 == NULL || LA13_1 == SINGLE || (LA13_1 >= STARTSWITH && LA13_1 <= SUBSTRINGOF)))
                                        {
                                            alt13 = 2;
                                        }
                                        else
                                        {
                                            NoViableAltException nvae = new NoViableAltException("", 13, 0, input, 1);
                                            DebugRecognitionException(nvae);
                                            throw nvae;
                                        }
                                    }
                                    finally { DebugExitDecision(13); }
                                    switch (alt13)
                                    {
                                        case 1:
                                            DebugEnterAlt(1);
                                            // Querys\\NdQuery.g3:48:5: '(' filterexpression[subquery] ')'
                                            {
                                                DebugLocation(48, 5);
                                                char_literal42 = (CommonToken)Match(input, 52, Follow._52_in_andexpression294);
                                                char_literal42_tree = (CommonTree)adaptor.Create(char_literal42);
                                                adaptor.AddChild(root_0, char_literal42_tree);
                                                DebugLocation(48, 9);
                                                PushFollow(Follow._filterexpression_in_andexpression296);
                                                filterexpression43 = filterexpression(subquery);
                                                PopFollow();

                                                adaptor.AddChild(root_0, filterexpression43.Tree);
                                                DebugLocation(48, 36);
                                                char_literal44 = (CommonToken)Match(input, 53, Follow._53_in_andexpression299);
                                                char_literal44_tree = (CommonTree)adaptor.Create(char_literal44);
                                                adaptor.AddChild(root_0, char_literal44_tree);

                                            }
                                            break;
                                        case 2:
                                            DebugEnterAlt(2);
                                            // Querys\\NdQuery.g3:48:42: booleanexpression[subquery]
                                            {
                                                DebugLocation(48, 42);
                                                PushFollow(Follow._booleanexpression_in_andexpression303);
                                                booleanexpression45 = booleanexpression(subquery);
                                                PopFollow();

                                                adaptor.AddChild(root_0, booleanexpression45.Tree);

                                            }
                                            break;

                                    }
                                }
                                finally { DebugExitSubRule(13); }


                            }
                            break;

                    }
                    retval.Stop = (CommonToken)input.LT(-1);

                    retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

                }
                catch (RecognitionException re)
                {
                    ReportError(re);
                    Recover(input, re);
                    retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

                }
                finally
                {
                    TraceOut("andexpression", 10);
                    LeaveRule("andexpression", 10);
                    LeaveRule_andexpression();
                }
                DebugLocation(48, 69);
            }
            finally { DebugExitRule(GrammarFileName, "andexpression"); }
            return retval;

        }
        // $ANTLR end "andexpression"

        partial void EnterRule_booleanexpression();
        partial void LeaveRule_booleanexpression();
        // $ANTLR start "booleanexpression"
        // Querys\\NdQuery.g3:50:1: booleanexpression[bool subquery] : atom1= atom[subquery] ( SPACE (op= EQUALS |op= NOTEQUALS |op= GREATERTHAN |op= GREATERTHANOREQUAL |op= LESSTHAN |op= LESSTHANOREQUAL ) SPACE atom2= atom[subquery] -> ^( $op $atom1 $atom2) | -> ^( EQUALS[\"eq\"] $atom1 BOOL[\"true\"] ) ) ;
        [GrammarRule("booleanexpression")]
        private AstParserRuleReturnScope<CommonTree, CommonToken> booleanexpression(bool subquery)
        {
            EnterRule_booleanexpression();
            EnterRule("booleanexpression", 11);
            TraceIn("booleanexpression", 11);
            AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
            retval.Start = (CommonToken)input.LT(1);

            CommonTree root_0 = default(CommonTree);

            CommonToken op = default(CommonToken);
            CommonToken SPACE46 = default(CommonToken);
            CommonToken SPACE47 = default(CommonToken);
            AstParserRuleReturnScope<CommonTree, CommonToken> atom1 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
            AstParserRuleReturnScope<CommonTree, CommonToken> atom2 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

            CommonTree op_tree = default(CommonTree);
            CommonTree SPACE46_tree = default(CommonTree);
            CommonTree SPACE47_tree = default(CommonTree);
            RewriteRuleITokenStream stream_SPACE = new RewriteRuleITokenStream(adaptor, "token SPACE");
            RewriteRuleITokenStream stream_EQUALS = new RewriteRuleITokenStream(adaptor, "token EQUALS");
            RewriteRuleITokenStream stream_NOTEQUALS = new RewriteRuleITokenStream(adaptor, "token NOTEQUALS");
            RewriteRuleITokenStream stream_GREATERTHAN = new RewriteRuleITokenStream(adaptor, "token GREATERTHAN");
            RewriteRuleITokenStream stream_GREATERTHANOREQUAL = new RewriteRuleITokenStream(adaptor, "token GREATERTHANOREQUAL");
            RewriteRuleITokenStream stream_LESSTHAN = new RewriteRuleITokenStream(adaptor, "token LESSTHAN");
            RewriteRuleITokenStream stream_LESSTHANOREQUAL = new RewriteRuleITokenStream(adaptor, "token LESSTHANOREQUAL");
            RewriteRuleSubtreeStream stream_atom = new RewriteRuleSubtreeStream(adaptor, "rule atom");
            try
            {
                DebugEnterRule(GrammarFileName, "booleanexpression");
                DebugLocation(50, 3);
                try
                {
                    // Querys\\NdQuery.g3:51:2: (atom1= atom[subquery] ( SPACE (op= EQUALS |op= NOTEQUALS |op= GREATERTHAN |op= GREATERTHANOREQUAL |op= LESSTHAN |op= LESSTHANOREQUAL ) SPACE atom2= atom[subquery] -> ^( $op $atom1 $atom2) | -> ^( EQUALS[\"eq\"] $atom1 BOOL[\"true\"] ) ) )
                    DebugEnterAlt(1);
                    // Querys\\NdQuery.g3:51:4: atom1= atom[subquery] ( SPACE (op= EQUALS |op= NOTEQUALS |op= GREATERTHAN |op= GREATERTHANOREQUAL |op= LESSTHAN |op= LESSTHANOREQUAL ) SPACE atom2= atom[subquery] -> ^( $op $atom1 $atom2) | -> ^( EQUALS[\"eq\"] $atom1 BOOL[\"true\"] ) )
                    {
                        DebugLocation(51, 9);
                        PushFollow(Follow._atom_in_booleanexpression319);
                        atom1 = atom(subquery);
                        PopFollow();

                        stream_atom.Add(atom1.Tree);
                        DebugLocation(51, 25);
                        // Querys\\NdQuery.g3:51:25: ( SPACE (op= EQUALS |op= NOTEQUALS |op= GREATERTHAN |op= GREATERTHANOREQUAL |op= LESSTHAN |op= LESSTHANOREQUAL ) SPACE atom2= atom[subquery] -> ^( $op $atom1 $atom2) | -> ^( EQUALS[\"eq\"] $atom1 BOOL[\"true\"] ) )
                        int alt16 = 2;
                        try
                        {
                            DebugEnterSubRule(16);
                            try
                            {
                                DebugEnterDecision(16, false);
                                int LA16_1 = input.LA(1);

                                if ((LA16_1 == SPACE))
                                {
                                    int LA16_2 = input.LA(2);

                                    if ((LA16_2 == AND || LA16_2 == OR))
                                    {
                                        alt16 = 2;
                                    }
                                    else if ((LA16_2 == EQUALS || (LA16_2 >= GREATERTHAN && LA16_2 <= GREATERTHANOREQUAL) || (LA16_2 >= LESSTHAN && LA16_2 <= LESSTHANOREQUAL) || LA16_2 == NOTEQUALS))
                                    {
                                        alt16 = 1;
                                    }
                                    else
                                    {
                                        NoViableAltException nvae = new NoViableAltException("", 16, 1, input, 2);
                                        DebugRecognitionException(nvae);
                                        throw nvae;
                                    }
                                }
                                else if ((LA16_1 == EOF || LA16_1 == FILTER || LA16_1 == INLINECOUNT || (LA16_1 >= ORDERBY && LA16_1 <= SELECT) || LA16_1 == SKIP || LA16_1 == TOP || LA16_1 == 51 || LA16_1 == 53))
                                {
                                    alt16 = 2;
                                }
                                else
                                {
                                    NoViableAltException nvae = new NoViableAltException("", 16, 0, input, 1);
                                    DebugRecognitionException(nvae);
                                    throw nvae;
                                }
                            }
                            finally { DebugExitDecision(16); }
                            switch (alt16)
                            {
                                case 1:
                                    DebugEnterAlt(1);
                                    // Querys\\NdQuery.g3:52:4: SPACE (op= EQUALS |op= NOTEQUALS |op= GREATERTHAN |op= GREATERTHANOREQUAL |op= LESSTHAN |op= LESSTHANOREQUAL ) SPACE atom2= atom[subquery]
                                    {
                                        DebugLocation(52, 4);
                                        SPACE46 = (CommonToken)Match(input, SPACE, Follow._SPACE_in_booleanexpression327);
                                        stream_SPACE.Add(SPACE46);

                                        DebugLocation(52, 10);
                                        // Querys\\NdQuery.g3:52:10: (op= EQUALS |op= NOTEQUALS |op= GREATERTHAN |op= GREATERTHANOREQUAL |op= LESSTHAN |op= LESSTHANOREQUAL )
                                        int alt15 = 6;
                                        try
                                        {
                                            DebugEnterSubRule(15);
                                            try
                                            {
                                                DebugEnterDecision(15, false);
                                                switch (input.LA(1))
                                                {
                                                    case EQUALS:
                                                        {
                                                            alt15 = 1;
                                                        }
                                                        break;
                                                    case NOTEQUALS:
                                                        {
                                                            alt15 = 2;
                                                        }
                                                        break;
                                                    case GREATERTHAN:
                                                        {
                                                            alt15 = 3;
                                                        }
                                                        break;
                                                    case GREATERTHANOREQUAL:
                                                        {
                                                            alt15 = 4;
                                                        }
                                                        break;
                                                    case LESSTHAN:
                                                        {
                                                            alt15 = 5;
                                                        }
                                                        break;
                                                    case LESSTHANOREQUAL:
                                                        {
                                                            alt15 = 6;
                                                        }
                                                        break;
                                                    default:
                                                        {
                                                            NoViableAltException nvae = new NoViableAltException("", 15, 0, input, 1);
                                                            DebugRecognitionException(nvae);
                                                            throw nvae;
                                                        }
                                                }

                                            }
                                            finally { DebugExitDecision(15); }
                                            switch (alt15)
                                            {
                                                case 1:
                                                    DebugEnterAlt(1);
                                                    // Querys\\NdQuery.g3:52:11: op= EQUALS
                                                    {
                                                        DebugLocation(52, 13);
                                                        op = (CommonToken)Match(input, EQUALS, Follow._EQUALS_in_booleanexpression332);
                                                        stream_EQUALS.Add(op);


                                                    }
                                                    break;
                                                case 2:
                                                    DebugEnterAlt(2);
                                                    // Querys\\NdQuery.g3:52:23: op= NOTEQUALS
                                                    {
                                                        DebugLocation(52, 25);
                                                        op = (CommonToken)Match(input, NOTEQUALS, Follow._NOTEQUALS_in_booleanexpression338);
                                                        stream_NOTEQUALS.Add(op);


                                                    }
                                                    break;
                                                case 3:
                                                    DebugEnterAlt(3);
                                                    // Querys\\NdQuery.g3:52:38: op= GREATERTHAN
                                                    {
                                                        DebugLocation(52, 40);
                                                        op = (CommonToken)Match(input, GREATERTHAN, Follow._GREATERTHAN_in_booleanexpression344);
                                                        stream_GREATERTHAN.Add(op);


                                                    }
                                                    break;
                                                case 4:
                                                    DebugEnterAlt(4);
                                                    // Querys\\NdQuery.g3:52:55: op= GREATERTHANOREQUAL
                                                    {
                                                        DebugLocation(52, 57);
                                                        op = (CommonToken)Match(input, GREATERTHANOREQUAL, Follow._GREATERTHANOREQUAL_in_booleanexpression350);
                                                        stream_GREATERTHANOREQUAL.Add(op);


                                                    }
                                                    break;
                                                case 5:
                                                    DebugEnterAlt(5);
                                                    // Querys\\NdQuery.g3:52:79: op= LESSTHAN
                                                    {
                                                        DebugLocation(52, 81);
                                                        op = (CommonToken)Match(input, LESSTHAN, Follow._LESSTHAN_in_booleanexpression356);
                                                        stream_LESSTHAN.Add(op);


                                                    }
                                                    break;
                                                case 6:
                                                    DebugEnterAlt(6);
                                                    // Querys\\NdQuery.g3:52:93: op= LESSTHANOREQUAL
                                                    {
                                                        DebugLocation(52, 95);
                                                        op = (CommonToken)Match(input, LESSTHANOREQUAL, Follow._LESSTHANOREQUAL_in_booleanexpression362);
                                                        stream_LESSTHANOREQUAL.Add(op);


                                                    }
                                                    break;

                                            }
                                        }
                                        finally { DebugExitSubRule(15); }

                                        DebugLocation(52, 113);
                                        SPACE47 = (CommonToken)Match(input, SPACE, Follow._SPACE_in_booleanexpression365);
                                        stream_SPACE.Add(SPACE47);

                                        DebugLocation(52, 124);
                                        PushFollow(Follow._atom_in_booleanexpression369);
                                        atom2 = atom(subquery);
                                        PopFollow();

                                        stream_atom.Add(atom2.Tree);


                                        {
                                            // AST REWRITE
                                            // elements: op, atom1, atom2
                                            // token labels: op
                                            // rule labels: atom1, atom2, retval
                                            // token list labels: 
                                            // rule list labels: 
                                            // wildcard labels: 
                                            retval.Tree = root_0;
                                            RewriteRuleITokenStream stream_op = new RewriteRuleITokenStream(adaptor, "token op", op);
                                            RewriteRuleSubtreeStream stream_atom1 = new RewriteRuleSubtreeStream(adaptor, "rule atom1", atom1 != null ? atom1.Tree : null);
                                            RewriteRuleSubtreeStream stream_atom2 = new RewriteRuleSubtreeStream(adaptor, "rule atom2", atom2 != null ? atom2.Tree : null);
                                            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.Tree : null);

                                            root_0 = (CommonTree)adaptor.Nil();
                                            // 53:4: -> ^( $op $atom1 $atom2)
                                            {
                                                DebugLocation(53, 7);
                                                // Querys\\NdQuery.g3:53:7: ^( $op $atom1 $atom2)
                                                {
                                                    CommonTree root_1 = (CommonTree)adaptor.Nil();
                                                    DebugLocation(53, 10);
                                                    root_1 = (CommonTree)adaptor.BecomeRoot(stream_op.NextNode(), root_1);

                                                    DebugLocation(53, 14);
                                                    adaptor.AddChild(root_1, stream_atom1.NextTree());
                                                    DebugLocation(53, 21);
                                                    adaptor.AddChild(root_1, stream_atom2.NextTree());

                                                    adaptor.AddChild(root_0, root_1);
                                                }

                                            }

                                            retval.Tree = root_0;
                                        }

                                    }
                                    break;
                                case 2:
                                    DebugEnterAlt(2);
                                    // Querys\\NdQuery.g3:54:5: 
                                    {

                                        {
                                            // AST REWRITE
                                            // elements: EQUALS, atom1
                                            // token labels: 
                                            // rule labels: atom1, retval
                                            // token list labels: 
                                            // rule list labels: 
                                            // wildcard labels: 
                                            retval.Tree = root_0;
                                            RewriteRuleSubtreeStream stream_atom1 = new RewriteRuleSubtreeStream(adaptor, "rule atom1", atom1 != null ? atom1.Tree : null);
                                            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.Tree : null);

                                            root_0 = (CommonTree)adaptor.Nil();
                                            // 54:5: -> ^( EQUALS[\"eq\"] $atom1 BOOL[\"true\"] )
                                            {
                                                DebugLocation(54, 8);
                                                // Querys\\NdQuery.g3:54:8: ^( EQUALS[\"eq\"] $atom1 BOOL[\"true\"] )
                                                {
                                                    CommonTree root_1 = (CommonTree)adaptor.Nil();
                                                    DebugLocation(54, 10);
                                                    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(EQUALS, "eq"), root_1);

                                                    DebugLocation(54, 24);
                                                    adaptor.AddChild(root_1, stream_atom1.NextTree());
                                                    DebugLocation(54, 30);
                                                    adaptor.AddChild(root_1, (CommonTree)adaptor.Create(BOOL, "true"));

                                                    adaptor.AddChild(root_0, root_1);
                                                }

                                            }

                                            retval.Tree = root_0;
                                        }

                                    }
                                    break;

                            }
                        }
                        finally { DebugExitSubRule(16); }


                    }

                    retval.Stop = (CommonToken)input.LT(-1);

                    retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

                }
                catch (RecognitionException re)
                {
                    ReportError(re);
                    Recover(input, re);
                    retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

                }
                finally
                {
                    TraceOut("booleanexpression", 11);
                    LeaveRule("booleanexpression", 11);
                    LeaveRule_booleanexpression();
                }
                DebugLocation(55, 3);
            }
            finally { DebugExitRule(GrammarFileName, "booleanexpression"); }
            return retval;

        }
        // $ANTLR end "booleanexpression"

        partial void EnterRule_atom();
        partial void LeaveRule_atom();
        // $ANTLR start "atom"
        // Querys\\NdQuery.g3:57:1: atom[bool subquery] : ( inexpression | functioncall | constant | propertyname );
        [GrammarRule("atom")]
        private AstParserRuleReturnScope<CommonTree, CommonToken> atom(bool subquery)
        {
            EnterRule_atom();
            EnterRule("atom", 12);
            TraceIn("atom", 12);
            AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
            retval.Start = (CommonToken)input.LT(1);

            CommonTree root_0 = default(CommonTree);

            AstParserRuleReturnScope<CommonTree, CommonToken> inexpression48 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
            AstParserRuleReturnScope<CommonTree, CommonToken> functioncall49 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
            AstParserRuleReturnScope<CommonTree, CommonToken> constant50 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
            AstParserRuleReturnScope<CommonTree, CommonToken> propertyname51 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

            try
            {
                DebugEnterRule(GrammarFileName, "atom");
                DebugLocation(57, 15);
                try
                {
                    // Querys\\NdQuery.g3:58:2: ( inexpression | functioncall | constant | propertyname )
                    int alt17 = 4;
                    try
                    {
                        DebugEnterDecision(17, false);
                        switch (input.LA(1))
                        {
                            case IDENTIFIER:
                                {
                                    int LA17_2 = input.LA(2);

                                    if ((LA17_2 == SPACE))
                                    {
                                        int LA17_3 = input.LA(3);

                                        if ((LA17_3 == IN || LA17_3 == NOTIN))
                                        {
                                            alt17 = 1;
                                        }
                                        else if ((LA17_3 == AND || LA17_3 == EQUALS || (LA17_3 >= GREATERTHAN && LA17_3 <= GREATERTHANOREQUAL) || (LA17_3 >= LESSTHAN && LA17_3 <= LESSTHANOREQUAL) || LA17_3 == NOTEQUALS || LA17_3 == OR || (LA17_3 >= 53 && LA17_3 <= 54)))
                                        {
                                            alt17 = 4;
                                        }
                                        else
                                        {
                                            NoViableAltException nvae = new NoViableAltException("", 17, 4, input, 3);
                                            DebugRecognitionException(nvae);
                                            throw nvae;
                                        }
                                    }
                                    else if ((LA17_2 == EOF || LA17_2 == FILTER || LA17_2 == INLINECOUNT || (LA17_2 >= ORDERBY && LA17_2 <= SELECT) || LA17_2 == SKIP || LA17_2 == TOP || LA17_2 == 51 || (LA17_2 >= 53 && LA17_2 <= 54)))
                                    {
                                        alt17 = 4;
                                    }
                                    else
                                    {
                                        NoViableAltException nvae = new NoViableAltException("", 17, 1, input, 2);
                                        DebugRecognitionException(nvae);
                                        throw nvae;
                                    }
                                }
                                break;
                            case ENDSWITH:
                            case STARTSWITH:
                            case SUBSTRINGOF:
                                {
                                    alt17 = 2;
                                }
                                break;
                            case BOOL:
                            case BYTE:
                            case DATETIME:
                            case DOUBLE:
                            case GUID:
                            case INT:
                            case LONG:
                            case NULL:
                            case SINGLE:
                            case STRING:
                                {
                                    alt17 = 3;
                                }
                                break;
                            default:
                                {
                                    NoViableAltException nvae = new NoViableAltException("", 17, 0, input, 1);
                                    DebugRecognitionException(nvae);
                                    throw nvae;
                                }
                        }

                    }
                    finally { DebugExitDecision(17); }
                    switch (alt17)
                    {
                        case 1:
                            DebugEnterAlt(1);
                            // Querys\\NdQuery.g3:58:4: inexpression
                            {
                                root_0 = (CommonTree)adaptor.Nil();

                                DebugLocation(58, 4);
                                PushFollow(Follow._inexpression_in_atom419);
                                inexpression48 = inexpression();
                                PopFollow();

                                adaptor.AddChild(root_0, inexpression48.Tree);

                            }
                            break;
                        case 2:
                            DebugEnterAlt(2);
                            // Querys\\NdQuery.g3:59:4: functioncall
                            {
                                root_0 = (CommonTree)adaptor.Nil();

                                DebugLocation(59, 4);
                                PushFollow(Follow._functioncall_in_atom424);
                                functioncall49 = functioncall();
                                PopFollow();

                                adaptor.AddChild(root_0, functioncall49.Tree);

                            }
                            break;
                        case 3:
                            DebugEnterAlt(3);
                            // Querys\\NdQuery.g3:60:4: constant
                            {
                                root_0 = (CommonTree)adaptor.Nil();

                                DebugLocation(60, 4);
                                PushFollow(Follow._constant_in_atom429);
                                constant50 = constant();
                                PopFollow();

                                adaptor.AddChild(root_0, constant50.Tree);

                            }
                            break;
                        case 4:
                            DebugEnterAlt(4);
                            // Querys\\NdQuery.g3:61:4: propertyname
                            {
                                root_0 = (CommonTree)adaptor.Nil();

                                DebugLocation(61, 4);
                                PushFollow(Follow._propertyname_in_atom434);
                                propertyname51 = propertyname();
                                PopFollow();

                                adaptor.AddChild(root_0, propertyname51.Tree);

                            }
                            break;

                    }
                    retval.Stop = (CommonToken)input.LT(-1);

                    retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

                }
                catch (RecognitionException re)
                {
                    ReportError(re);
                    Recover(input, re);
                    retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

                }
                finally
                {
                    TraceOut("atom", 12);
                    LeaveRule("atom", 12);
                    LeaveRule_atom();
                }
                DebugLocation(61, 15);
            }
            finally { DebugExitRule(GrammarFileName, "atom"); }
            return retval;

        }
        // $ANTLR end "atom"

        partial void EnterRule_inexpression();
        partial void LeaveRule_inexpression();
        // $ANTLR start "inexpression"
        // Querys\\NdQuery.g3:63:1: inexpression : propertyname SPACE ( IN | NOTIN ) ^ ( SPACE )? '(' ( SPACE )? ( constant )? ( ( SPACE )? ',' ( SPACE )? constant )* ( SPACE )? ')' ;
        [GrammarRule("inexpression")]
        private AstParserRuleReturnScope<CommonTree, CommonToken> inexpression()
        {
            EnterRule_inexpression();
            EnterRule("inexpression", 13);
            TraceIn("inexpression", 13);
            AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
            retval.Start = (CommonToken)input.LT(1);

            CommonTree root_0 = default(CommonTree);

            CommonToken SPACE53 = default(CommonToken);
            CommonToken set54 = default(CommonToken);
            CommonToken SPACE55 = default(CommonToken);
            CommonToken char_literal56 = default(CommonToken);
            CommonToken SPACE57 = default(CommonToken);
            CommonToken SPACE59 = default(CommonToken);
            CommonToken char_literal60 = default(CommonToken);
            CommonToken SPACE61 = default(CommonToken);
            CommonToken SPACE63 = default(CommonToken);
            CommonToken char_literal64 = default(CommonToken);
            AstParserRuleReturnScope<CommonTree, CommonToken> propertyname52 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
            AstParserRuleReturnScope<CommonTree, CommonToken> constant58 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
            AstParserRuleReturnScope<CommonTree, CommonToken> constant62 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

            CommonTree SPACE53_tree = default(CommonTree);
            CommonTree set54_tree = default(CommonTree);
            CommonTree SPACE55_tree = default(CommonTree);
            CommonTree char_literal56_tree = default(CommonTree);
            CommonTree SPACE57_tree = default(CommonTree);
            CommonTree SPACE59_tree = default(CommonTree);
            CommonTree char_literal60_tree = default(CommonTree);
            CommonTree SPACE61_tree = default(CommonTree);
            CommonTree SPACE63_tree = default(CommonTree);
            CommonTree char_literal64_tree = default(CommonTree);
            try
            {
                DebugEnterRule(GrammarFileName, "inexpression");
                DebugLocation(63, 101);
                try
                {
                    // Querys\\NdQuery.g3:64:2: ( propertyname SPACE ( IN | NOTIN ) ^ ( SPACE )? '(' ( SPACE )? ( constant )? ( ( SPACE )? ',' ( SPACE )? constant )* ( SPACE )? ')' )
                    DebugEnterAlt(1);
                    // Querys\\NdQuery.g3:64:4: propertyname SPACE ( IN | NOTIN ) ^ ( SPACE )? '(' ( SPACE )? ( constant )? ( ( SPACE )? ',' ( SPACE )? constant )* ( SPACE )? ')'
                    {
                        root_0 = (CommonTree)adaptor.Nil();

                        DebugLocation(64, 4);
                        PushFollow(Follow._propertyname_in_inexpression444);
                        propertyname52 = propertyname();
                        PopFollow();

                        adaptor.AddChild(root_0, propertyname52.Tree);
                        DebugLocation(64, 17);
                        SPACE53 = (CommonToken)Match(input, SPACE, Follow._SPACE_in_inexpression446);
                        SPACE53_tree = (CommonTree)adaptor.Create(SPACE53);
                        adaptor.AddChild(root_0, SPACE53_tree);
                        DebugLocation(64, 33);

                        set54 = (CommonToken)input.LT(1);
                        set54 = (CommonToken)input.LT(1);
                        if (input.LA(1) == IN || input.LA(1) == NOTIN)
                        {
                            input.Consume();
                            root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set54), root_0);
                            state.errorRecovery = false;
                        }
                        else
                        {
                            MismatchedSetException mse = new MismatchedSetException(null, input);
                            DebugRecognitionException(mse);
                            throw mse;
                        }

                        DebugLocation(64, 35);
                        // Querys\\NdQuery.g3:64:35: ( SPACE )?
                        int alt18 = 2;
                        try
                        {
                            DebugEnterSubRule(18);
                            try
                            {
                                DebugEnterDecision(18, false);
                                int LA18_1 = input.LA(1);

                                if ((LA18_1 == SPACE))
                                {
                                    alt18 = 1;
                                }
                            }
                            finally { DebugExitDecision(18); }
                            switch (alt18)
                            {
                                case 1:
                                    DebugEnterAlt(1);
                                    // Querys\\NdQuery.g3:64:35: SPACE
                                    {
                                        DebugLocation(64, 35);
                                        SPACE55 = (CommonToken)Match(input, SPACE, Follow._SPACE_in_inexpression455);
                                        SPACE55_tree = (CommonTree)adaptor.Create(SPACE55);
                                        adaptor.AddChild(root_0, SPACE55_tree);

                                    }
                                    break;

                            }
                        }
                        finally { DebugExitSubRule(18); }

                        DebugLocation(64, 41);
                        char_literal56 = (CommonToken)Match(input, 52, Follow._52_in_inexpression457);
                        char_literal56_tree = (CommonTree)adaptor.Create(char_literal56);
                        adaptor.AddChild(root_0, char_literal56_tree);
                        DebugLocation(64, 45);
                        // Querys\\NdQuery.g3:64:45: ( SPACE )?
                        int alt19 = 2;
                        try
                        {
                            DebugEnterSubRule(19);
                            try
                            {
                                DebugEnterDecision(19, false);
                                int LA19_1 = input.LA(1);

                                if ((LA19_1 == SPACE))
                                {
                                    alt19 = 1;
                                }
                            }
                            finally { DebugExitDecision(19); }
                            switch (alt19)
                            {
                                case 1:
                                    DebugEnterAlt(1);
                                    // Querys\\NdQuery.g3:64:45: SPACE
                                    {
                                        DebugLocation(64, 45);
                                        SPACE57 = (CommonToken)Match(input, SPACE, Follow._SPACE_in_inexpression459);
                                        SPACE57_tree = (CommonTree)adaptor.Create(SPACE57);
                                        adaptor.AddChild(root_0, SPACE57_tree);

                                    }
                                    break;

                            }
                        }
                        finally { DebugExitSubRule(19); }

                        DebugLocation(64, 52);
                        // Querys\\NdQuery.g3:64:52: ( constant )?
                        int alt20 = 2;
                        try
                        {
                            DebugEnterSubRule(20);
                            try
                            {
                                DebugEnterDecision(20, false);
                                int LA20_1 = input.LA(1);

                                if (((LA20_1 >= BOOL && LA20_1 <= BYTE) || LA20_1 == DATETIME || LA20_1 == DOUBLE || LA20_1 == GUID || LA20_1 == INT || LA20_1 == LONG || LA20_1 == NULL || LA20_1 == SINGLE || LA20_1 == STRING))
                                {
                                    alt20 = 1;
                                }
                            }
                            finally { DebugExitDecision(20); }
                            switch (alt20)
                            {
                                case 1:
                                    DebugEnterAlt(1);
                                    // Querys\\NdQuery.g3:64:52: constant
                                    {
                                        DebugLocation(64, 52);
                                        PushFollow(Follow._constant_in_inexpression462);
                                        constant58 = constant();
                                        PopFollow();

                                        adaptor.AddChild(root_0, constant58.Tree);

                                    }
                                    break;

                            }
                        }
                        finally { DebugExitSubRule(20); }

                        DebugLocation(64, 62);
                        // Querys\\NdQuery.g3:64:62: ( ( SPACE )? ',' ( SPACE )? constant )*
                        try
                        {
                            DebugEnterSubRule(23);
                            while (true)
                            {
                                int alt23 = 2;
                                try
                                {
                                    DebugEnterDecision(23, false);
                                    int LA23_1 = input.LA(1);

                                    if ((LA23_1 == SPACE))
                                    {
                                        int LA23_2 = input.LA(2);

                                        if ((LA23_2 == 54))
                                        {
                                            alt23 = 1;
                                        }


                                    }
                                    else if ((LA23_1 == 54))
                                    {
                                        alt23 = 1;
                                    }


                                }
                                finally { DebugExitDecision(23); }
                                switch (alt23)
                                {
                                    case 1:
                                        DebugEnterAlt(1);
                                        // Querys\\NdQuery.g3:64:63: ( SPACE )? ',' ( SPACE )? constant
                                        {
                                            DebugLocation(64, 63);
                                            // Querys\\NdQuery.g3:64:63: ( SPACE )?
                                            int alt21 = 2;
                                            try
                                            {
                                                DebugEnterSubRule(21);
                                                try
                                                {
                                                    DebugEnterDecision(21, false);
                                                    int LA21_1 = input.LA(1);

                                                    if ((LA21_1 == SPACE))
                                                    {
                                                        alt21 = 1;
                                                    }
                                                }
                                                finally { DebugExitDecision(21); }
                                                switch (alt21)
                                                {
                                                    case 1:
                                                        DebugEnterAlt(1);
                                                        // Querys\\NdQuery.g3:64:63: SPACE
                                                        {
                                                            DebugLocation(64, 63);
                                                            SPACE59 = (CommonToken)Match(input, SPACE, Follow._SPACE_in_inexpression466);
                                                            SPACE59_tree = (CommonTree)adaptor.Create(SPACE59);
                                                            adaptor.AddChild(root_0, SPACE59_tree);

                                                        }
                                                        break;

                                                }
                                            }
                                            finally { DebugExitSubRule(21); }

                                            DebugLocation(64, 70);
                                            char_literal60 = (CommonToken)Match(input, 54, Follow._54_in_inexpression469);
                                            char_literal60_tree = (CommonTree)adaptor.Create(char_literal60);
                                            adaptor.AddChild(root_0, char_literal60_tree);
                                            DebugLocation(64, 74);
                                            // Querys\\NdQuery.g3:64:74: ( SPACE )?
                                            int alt22 = 2;
                                            try
                                            {
                                                DebugEnterSubRule(22);
                                                try
                                                {
                                                    DebugEnterDecision(22, false);
                                                    int LA22_1 = input.LA(1);

                                                    if ((LA22_1 == SPACE))
                                                    {
                                                        alt22 = 1;
                                                    }
                                                }
                                                finally { DebugExitDecision(22); }
                                                switch (alt22)
                                                {
                                                    case 1:
                                                        DebugEnterAlt(1);
                                                        // Querys\\NdQuery.g3:64:74: SPACE
                                                        {
                                                            DebugLocation(64, 74);
                                                            SPACE61 = (CommonToken)Match(input, SPACE, Follow._SPACE_in_inexpression471);
                                                            SPACE61_tree = (CommonTree)adaptor.Create(SPACE61);
                                                            adaptor.AddChild(root_0, SPACE61_tree);

                                                        }
                                                        break;

                                                }
                                            }
                                            finally { DebugExitSubRule(22); }

                                            DebugLocation(64, 81);
                                            PushFollow(Follow._constant_in_inexpression474);
                                            constant62 = constant();
                                            PopFollow();

                                            adaptor.AddChild(root_0, constant62.Tree);

                                        }
                                        break;

                                    default:
                                        goto loop23;
                                }
                            }

                        loop23:
                            ;

                        }
                        finally { DebugExitSubRule(23); }

                        DebugLocation(64, 92);
                        // Querys\\NdQuery.g3:64:92: ( SPACE )?
                        int alt24 = 2;
                        try
                        {
                            DebugEnterSubRule(24);
                            try
                            {
                                DebugEnterDecision(24, false);
                                int LA24_1 = input.LA(1);

                                if ((LA24_1 == SPACE))
                                {
                                    alt24 = 1;
                                }
                            }
                            finally { DebugExitDecision(24); }
                            switch (alt24)
                            {
                                case 1:
                                    DebugEnterAlt(1);
                                    // Querys\\NdQuery.g3:64:92: SPACE
                                    {
                                        DebugLocation(64, 92);
                                        SPACE63 = (CommonToken)Match(input, SPACE, Follow._SPACE_in_inexpression478);
                                        SPACE63_tree = (CommonTree)adaptor.Create(SPACE63);
                                        adaptor.AddChild(root_0, SPACE63_tree);

                                    }
                                    break;

                            }
                        }
                        finally { DebugExitSubRule(24); }

                        DebugLocation(64, 99);
                        char_literal64 = (CommonToken)Match(input, 53, Follow._53_in_inexpression481);
                        char_literal64_tree = (CommonTree)adaptor.Create(char_literal64);
                        adaptor.AddChild(root_0, char_literal64_tree);

                    }

                    retval.Stop = (CommonToken)input.LT(-1);

                    retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

                }
                catch (RecognitionException re)
                {
                    ReportError(re);
                    Recover(input, re);
                    retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

                }
                finally
                {
                    TraceOut("inexpression", 13);
                    LeaveRule("inexpression", 13);
                    LeaveRule_inexpression();
                }
                DebugLocation(64, 101);
            }
            finally { DebugExitRule(GrammarFileName, "inexpression"); }
            return retval;

        }
        // $ANTLR end "inexpression"

        partial void EnterRule_functioncall();
        partial void LeaveRule_functioncall();
        // $ANTLR start "functioncall"
        // Querys\\NdQuery.g3:66:1: functioncall : function ^ ( SPACE )? '(' ( SPACE )? atom[false] ( ( SPACE )? ',' ( SPACE )? constant )* ( SPACE )? ')' ;
        [GrammarRule("functioncall")]
        private AstParserRuleReturnScope<CommonTree, CommonToken> functioncall()
        {
            EnterRule_functioncall();
            EnterRule("functioncall", 14);
            TraceIn("functioncall", 14);
            AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
            retval.Start = (CommonToken)input.LT(1);

            CommonTree root_0 = default(CommonTree);

            CommonToken SPACE66 = default(CommonToken);
            CommonToken char_literal67 = default(CommonToken);
            CommonToken SPACE68 = default(CommonToken);
            CommonToken SPACE70 = default(CommonToken);
            CommonToken char_literal71 = default(CommonToken);
            CommonToken SPACE72 = default(CommonToken);
            CommonToken SPACE74 = default(CommonToken);
            CommonToken char_literal75 = default(CommonToken);
            AstParserRuleReturnScope<CommonTree, CommonToken> function65 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
            AstParserRuleReturnScope<CommonTree, CommonToken> atom69 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
            AstParserRuleReturnScope<CommonTree, CommonToken> constant73 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

            CommonTree SPACE66_tree = default(CommonTree);
            CommonTree char_literal67_tree = default(CommonTree);
            CommonTree SPACE68_tree = default(CommonTree);
            CommonTree SPACE70_tree = default(CommonTree);
            CommonTree char_literal71_tree = default(CommonTree);
            CommonTree SPACE72_tree = default(CommonTree);
            CommonTree SPACE74_tree = default(CommonTree);
            CommonTree char_literal75_tree = default(CommonTree);
            try
            {
                DebugEnterRule(GrammarFileName, "functioncall");
                DebugLocation(66, 82);
                try
                {
                    // Querys\\NdQuery.g3:67:2: ( function ^ ( SPACE )? '(' ( SPACE )? atom[false] ( ( SPACE )? ',' ( SPACE )? constant )* ( SPACE )? ')' )
                    DebugEnterAlt(1);
                    // Querys\\NdQuery.g3:67:4: function ^ ( SPACE )? '(' ( SPACE )? atom[false] ( ( SPACE )? ',' ( SPACE )? constant )* ( SPACE )? ')'
                    {
                        root_0 = (CommonTree)adaptor.Nil();

                        DebugLocation(67, 12);
                        PushFollow(Follow._function_in_functioncall492);
                        function65 = function();
                        PopFollow();

                        root_0 = (CommonTree)adaptor.BecomeRoot(function65.Tree, root_0);
                        DebugLocation(67, 14);
                        // Querys\\NdQuery.g3:67:14: ( SPACE )?
                        int alt25 = 2;
                        try
                        {
                            DebugEnterSubRule(25);
                            try
                            {
                                DebugEnterDecision(25, false);
                                int LA25_1 = input.LA(1);

                                if ((LA25_1 == SPACE))
                                {
                                    alt25 = 1;
                                }
                            }
                            finally { DebugExitDecision(25); }
                            switch (alt25)
                            {
                                case 1:
                                    DebugEnterAlt(1);
                                    // Querys\\NdQuery.g3:67:14: SPACE
                                    {
                                        DebugLocation(67, 14);
                                        SPACE66 = (CommonToken)Match(input, SPACE, Follow._SPACE_in_functioncall495);
                                        SPACE66_tree = (CommonTree)adaptor.Create(SPACE66);
                                        adaptor.AddChild(root_0, SPACE66_tree);

                                    }
                                    break;

                            }
                        }
                        finally { DebugExitSubRule(25); }

                        DebugLocation(67, 21);
                        char_literal67 = (CommonToken)Match(input, 52, Follow._52_in_functioncall498);
                        char_literal67_tree = (CommonTree)adaptor.Create(char_literal67);
                        adaptor.AddChild(root_0, char_literal67_tree);
                        DebugLocation(67, 24);
                        // Querys\\NdQuery.g3:67:24: ( SPACE )?
                        int alt26 = 2;
                        try
                        {
                            DebugEnterSubRule(26);
                            try
                            {
                                DebugEnterDecision(26, false);
                                int LA26_1 = input.LA(1);

                                if ((LA26_1 == SPACE))
                                {
                                    alt26 = 1;
                                }
                            }
                            finally { DebugExitDecision(26); }
                            switch (alt26)
                            {
                                case 1:
                                    DebugEnterAlt(1);
                                    // Querys\\NdQuery.g3:67:24: SPACE
                                    {
                                        DebugLocation(67, 24);
                                        SPACE68 = (CommonToken)Match(input, SPACE, Follow._SPACE_in_functioncall499);
                                        SPACE68_tree = (CommonTree)adaptor.Create(SPACE68);
                                        adaptor.AddChild(root_0, SPACE68_tree);

                                    }
                                    break;

                            }
                        }
                        finally { DebugExitSubRule(26); }

                        DebugLocation(67, 31);
                        PushFollow(Follow._atom_in_functioncall502);
                        atom69 = atom(false);
                        PopFollow();

                        adaptor.AddChild(root_0, atom69.Tree);
                        DebugLocation(67, 43);
                        // Querys\\NdQuery.g3:67:43: ( ( SPACE )? ',' ( SPACE )? constant )*
                        try
                        {
                            DebugEnterSubRule(29);
                            while (true)
                            {
                                int alt29 = 2;
                                try
                                {
                                    DebugEnterDecision(29, false);
                                    int LA29_1 = input.LA(1);

                                    if ((LA29_1 == SPACE))
                                    {
                                        int LA29_2 = input.LA(2);

                                        if ((LA29_2 == 54))
                                        {
                                            alt29 = 1;
                                        }


                                    }
                                    else if ((LA29_1 == 54))
                                    {
                                        alt29 = 1;
                                    }


                                }
                                finally { DebugExitDecision(29); }
                                switch (alt29)
                                {
                                    case 1:
                                        DebugEnterAlt(1);
                                        // Querys\\NdQuery.g3:67:44: ( SPACE )? ',' ( SPACE )? constant
                                        {
                                            DebugLocation(67, 44);
                                            // Querys\\NdQuery.g3:67:44: ( SPACE )?
                                            int alt27 = 2;
                                            try
                                            {
                                                DebugEnterSubRule(27);
                                                try
                                                {
                                                    DebugEnterDecision(27, false);
                                                    int LA27_1 = input.LA(1);

                                                    if ((LA27_1 == SPACE))
                                                    {
                                                        alt27 = 1;
                                                    }
                                                }
                                                finally { DebugExitDecision(27); }
                                                switch (alt27)
                                                {
                                                    case 1:
                                                        DebugEnterAlt(1);
                                                        // Querys\\NdQuery.g3:67:44: SPACE
                                                        {
                                                            DebugLocation(67, 44);
                                                            SPACE70 = (CommonToken)Match(input, SPACE, Follow._SPACE_in_functioncall506);
                                                            SPACE70_tree = (CommonTree)adaptor.Create(SPACE70);
                                                            adaptor.AddChild(root_0, SPACE70_tree);

                                                        }
                                                        break;

                                                }
                                            }
                                            finally { DebugExitSubRule(27); }

                                            DebugLocation(67, 51);
                                            char_literal71 = (CommonToken)Match(input, 54, Follow._54_in_functioncall509);
                                            char_literal71_tree = (CommonTree)adaptor.Create(char_literal71);
                                            adaptor.AddChild(root_0, char_literal71_tree);
                                            DebugLocation(67, 55);
                                            // Querys\\NdQuery.g3:67:55: ( SPACE )?
                                            int alt28 = 2;
                                            try
                                            {
                                                DebugEnterSubRule(28);
                                                try
                                                {
                                                    DebugEnterDecision(28, false);
                                                    int LA28_1 = input.LA(1);

                                                    if ((LA28_1 == SPACE))
                                                    {
                                                        alt28 = 1;
                                                    }
                                                }
                                                finally { DebugExitDecision(28); }
                                                switch (alt28)
                                                {
                                                    case 1:
                                                        DebugEnterAlt(1);
                                                        // Querys\\NdQuery.g3:67:55: SPACE
                                                        {
                                                            DebugLocation(67, 55);
                                                            SPACE72 = (CommonToken)Match(input, SPACE, Follow._SPACE_in_functioncall511);
                                                            SPACE72_tree = (CommonTree)adaptor.Create(SPACE72);
                                                            adaptor.AddChild(root_0, SPACE72_tree);

                                                        }
                                                        break;

                                                }
                                            }
                                            finally { DebugExitSubRule(28); }

                                            DebugLocation(67, 62);
                                            PushFollow(Follow._constant_in_functioncall514);
                                            constant73 = constant();
                                            PopFollow();

                                            adaptor.AddChild(root_0, constant73.Tree);

                                        }
                                        break;

                                    default:
                                        goto loop29;
                                }
                            }

                        loop29:
                            ;

                        }
                        finally { DebugExitSubRule(29); }

                        DebugLocation(67, 73);
                        // Querys\\NdQuery.g3:67:73: ( SPACE )?
                        int alt30 = 2;
                        try
                        {
                            DebugEnterSubRule(30);
                            try
                            {
                                DebugEnterDecision(30, false);
                                int LA30_1 = input.LA(1);

                                if ((LA30_1 == SPACE))
                                {
                                    alt30 = 1;
                                }
                            }
                            finally { DebugExitDecision(30); }
                            switch (alt30)
                            {
                                case 1:
                                    DebugEnterAlt(1);
                                    // Querys\\NdQuery.g3:67:73: SPACE
                                    {
                                        DebugLocation(67, 73);
                                        SPACE74 = (CommonToken)Match(input, SPACE, Follow._SPACE_in_functioncall518);
                                        SPACE74_tree = (CommonTree)adaptor.Create(SPACE74);
                                        adaptor.AddChild(root_0, SPACE74_tree);

                                    }
                                    break;

                            }
                        }
                        finally { DebugExitSubRule(30); }

                        DebugLocation(67, 80);
                        char_literal75 = (CommonToken)Match(input, 53, Follow._53_in_functioncall521);
                        char_literal75_tree = (CommonTree)adaptor.Create(char_literal75);
                        adaptor.AddChild(root_0, char_literal75_tree);

                    }

                    retval.Stop = (CommonToken)input.LT(-1);

                    retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

                }
                catch (RecognitionException re)
                {
                    ReportError(re);
                    Recover(input, re);
                    retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

                }
                finally
                {
                    TraceOut("functioncall", 14);
                    LeaveRule("functioncall", 14);
                    LeaveRule_functioncall();
                }
                DebugLocation(67, 82);
            }
            finally { DebugExitRule(GrammarFileName, "functioncall"); }
            return retval;

        }
        // $ANTLR end "functioncall"

        partial void EnterRule_function();
        partial void LeaveRule_function();
        // $ANTLR start "function"
        // Querys\\NdQuery.g3:69:1: function : ( STARTSWITH | ENDSWITH | SUBSTRINGOF );
        [GrammarRule("function")]
        private AstParserRuleReturnScope<CommonTree, CommonToken> function()
        {
            EnterRule_function();
            EnterRule("function", 15);
            TraceIn("function", 15);
            AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
            retval.Start = (CommonToken)input.LT(1);

            CommonTree root_0 = default(CommonTree);

            CommonToken set76 = default(CommonToken);

            CommonTree set76_tree = default(CommonTree);
            try
            {
                DebugEnterRule(GrammarFileName, "function");
                DebugLocation(69, 38);
                try
                {
                    // Querys\\NdQuery.g3:70:2: ( STARTSWITH | ENDSWITH | SUBSTRINGOF )
                    DebugEnterAlt(1);
                    // Querys\\NdQuery.g3:
                    {
                        root_0 = (CommonTree)adaptor.Nil();

                        DebugLocation(70, 2);

                        set76 = (CommonToken)input.LT(1);
                        if (input.LA(1) == ENDSWITH || input.LA(1) == STARTSWITH || input.LA(1) == SUBSTRINGOF)
                        {
                            input.Consume();
                            adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set76));
                            state.errorRecovery = false;
                        }
                        else
                        {
                            MismatchedSetException mse = new MismatchedSetException(null, input);
                            DebugRecognitionException(mse);
                            throw mse;
                        }


                    }

                    retval.Stop = (CommonToken)input.LT(-1);

                    retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

                }
                catch (RecognitionException re)
                {
                    ReportError(re);
                    Recover(input, re);
                    retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

                }
                finally
                {
                    TraceOut("function", 15);
                    LeaveRule("function", 15);
                    LeaveRule_function();
                }
                DebugLocation(70, 38);
            }
            finally { DebugExitRule(GrammarFileName, "function"); }
            return retval;

        }
        // $ANTLR end "function"

        partial void EnterRule_orderby();
        partial void LeaveRule_orderby();
        // $ANTLR start "orderby"
        // Querys\\NdQuery.g3:72:1: orderby : ORDERBY ^ orderbylist ;
        [GrammarRule("orderby")]
        private AstParserRuleReturnScope<CommonTree, CommonToken> orderby()
        {
            EnterRule_orderby();
            EnterRule("orderby", 16);
            TraceIn("orderby", 16);
            AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
            retval.Start = (CommonToken)input.LT(1);

            CommonTree root_0 = default(CommonTree);

            CommonToken ORDERBY77 = default(CommonToken);
            AstParserRuleReturnScope<CommonTree, CommonToken> orderbylist78 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

            CommonTree ORDERBY77_tree = default(CommonTree);
            try
            {
                DebugEnterRule(GrammarFileName, "orderby");
                DebugLocation(72, 23);
                try
                {
                    // Querys\\NdQuery.g3:73:2: ( ORDERBY ^ orderbylist )
                    DebugEnterAlt(1);
                    // Querys\\NdQuery.g3:73:4: ORDERBY ^ orderbylist
                    {
                        root_0 = (CommonTree)adaptor.Nil();

                        DebugLocation(73, 11);
                        ORDERBY77 = (CommonToken)Match(input, ORDERBY, Follow._ORDERBY_in_orderby550);
                        ORDERBY77_tree = (CommonTree)adaptor.Create(ORDERBY77);
                        root_0 = (CommonTree)adaptor.BecomeRoot(ORDERBY77_tree, root_0);
                        DebugLocation(73, 13);
                        PushFollow(Follow._orderbylist_in_orderby553);
                        orderbylist78 = orderbylist();
                        PopFollow();

                        adaptor.AddChild(root_0, orderbylist78.Tree);

                    }

                    retval.Stop = (CommonToken)input.LT(-1);

                    retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

                }
                catch (RecognitionException re)
                {
                    ReportError(re);
                    Recover(input, re);
                    retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

                }
                finally
                {
                    TraceOut("orderby", 16);
                    LeaveRule("orderby", 16);
                    LeaveRule_orderby();
                }
                DebugLocation(73, 23);
            }
            finally { DebugExitRule(GrammarFileName, "orderby"); }
            return retval;

        }
        // $ANTLR end "orderby"

        partial void EnterRule_orderbylist();
        partial void LeaveRule_orderbylist();
        // $ANTLR start "orderbylist"
        // Querys\\NdQuery.g3:75:1: orderbylist : orderpropertyname ( ( SPACE )? ',' ! ( SPACE )? orderpropertyname )* ;
        [GrammarRule("orderbylist")]
        private AstParserRuleReturnScope<CommonTree, CommonToken> orderbylist()
        {
            EnterRule_orderbylist();
            EnterRule("orderbylist", 17);
            TraceIn("orderbylist", 17);
            AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
            retval.Start = (CommonToken)input.LT(1);

            CommonTree root_0 = default(CommonTree);

            CommonToken SPACE80 = default(CommonToken);
            CommonToken char_literal81 = default(CommonToken);
            CommonToken SPACE82 = default(CommonToken);
            AstParserRuleReturnScope<CommonTree, CommonToken> orderpropertyname79 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
            AstParserRuleReturnScope<CommonTree, CommonToken> orderpropertyname83 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

            CommonTree SPACE80_tree = default(CommonTree);
            CommonTree char_literal81_tree = default(CommonTree);
            CommonTree SPACE82_tree = default(CommonTree);
            try
            {
                DebugEnterRule(GrammarFileName, "orderbylist");
                DebugLocation(75, 61);
                try
                {
                    // Querys\\NdQuery.g3:76:2: ( orderpropertyname ( ( SPACE )? ',' ! ( SPACE )? orderpropertyname )* )
                    DebugEnterAlt(1);
                    // Querys\\NdQuery.g3:76:4: orderpropertyname ( ( SPACE )? ',' ! ( SPACE )? orderpropertyname )*
                    {
                        root_0 = (CommonTree)adaptor.Nil();

                        DebugLocation(76, 4);
                        PushFollow(Follow._orderpropertyname_in_orderbylist563);
                        orderpropertyname79 = orderpropertyname();
                        PopFollow();

                        adaptor.AddChild(root_0, orderpropertyname79.Tree);
                        DebugLocation(76, 22);
                        // Querys\\NdQuery.g3:76:22: ( ( SPACE )? ',' ! ( SPACE )? orderpropertyname )*
                        try
                        {
                            DebugEnterSubRule(33);
                            while (true)
                            {
                                int alt33 = 2;
                                try
                                {
                                    DebugEnterDecision(33, false);
                                    int LA33_1 = input.LA(1);

                                    if ((LA33_1 == SPACE || LA33_1 == 54))
                                    {
                                        alt33 = 1;
                                    }


                                }
                                finally { DebugExitDecision(33); }
                                switch (alt33)
                                {
                                    case 1:
                                        DebugEnterAlt(1);
                                        // Querys\\NdQuery.g3:76:23: ( SPACE )? ',' ! ( SPACE )? orderpropertyname
                                        {
                                            DebugLocation(76, 23);
                                            // Querys\\NdQuery.g3:76:23: ( SPACE )?
                                            int alt31 = 2;
                                            try
                                            {
                                                DebugEnterSubRule(31);
                                                try
                                                {
                                                    DebugEnterDecision(31, false);
                                                    int LA31_1 = input.LA(1);

                                                    if ((LA31_1 == SPACE))
                                                    {
                                                        alt31 = 1;
                                                    }
                                                }
                                                finally { DebugExitDecision(31); }
                                                switch (alt31)
                                                {
                                                    case 1:
                                                        DebugEnterAlt(1);
                                                        // Querys\\NdQuery.g3:76:23: SPACE
                                                        {
                                                            DebugLocation(76, 23);
                                                            SPACE80 = (CommonToken)Match(input, SPACE, Follow._SPACE_in_orderbylist566);
                                                            SPACE80_tree = (CommonTree)adaptor.Create(SPACE80);
                                                            adaptor.AddChild(root_0, SPACE80_tree);

                                                        }
                                                        break;

                                                }
                                            }
                                            finally { DebugExitSubRule(31); }

                                            DebugLocation(76, 33);
                                            char_literal81 = (CommonToken)Match(input, 54, Follow._54_in_orderbylist569);
                                            DebugLocation(76, 36);
                                            // Querys\\NdQuery.g3:76:36: ( SPACE )?
                                            int alt32 = 2;
                                            try
                                            {
                                                DebugEnterSubRule(32);
                                                try
                                                {
                                                    DebugEnterDecision(32, false);
                                                    int LA32_1 = input.LA(1);

                                                    if ((LA32_1 == SPACE))
                                                    {
                                                        alt32 = 1;
                                                    }
                                                }
                                                finally { DebugExitDecision(32); }
                                                switch (alt32)
                                                {
                                                    case 1:
                                                        DebugEnterAlt(1);
                                                        // Querys\\NdQuery.g3:76:36: SPACE
                                                        {
                                                            DebugLocation(76, 36);
                                                            SPACE82 = (CommonToken)Match(input, SPACE, Follow._SPACE_in_orderbylist573);
                                                            SPACE82_tree = (CommonTree)adaptor.Create(SPACE82);
                                                            adaptor.AddChild(root_0, SPACE82_tree);

                                                        }
                                                        break;

                                                }
                                            }
                                            finally { DebugExitSubRule(32); }

                                            DebugLocation(76, 43);
                                            PushFollow(Follow._orderpropertyname_in_orderbylist576);
                                            orderpropertyname83 = orderpropertyname();
                                            PopFollow();

                                            adaptor.AddChild(root_0, orderpropertyname83.Tree);

                                        }
                                        break;

                                    default:
                                        goto loop33;
                                }
                            }

                        loop33:
                            ;

                        }
                        finally { DebugExitSubRule(33); }


                    }

                    retval.Stop = (CommonToken)input.LT(-1);

                    retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

                }
                catch (RecognitionException re)
                {
                    ReportError(re);
                    Recover(input, re);
                    retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

                }
                finally
                {
                    TraceOut("orderbylist", 17);
                    LeaveRule("orderbylist", 17);
                    LeaveRule_orderbylist();
                }
                DebugLocation(76, 61);
            }
            finally { DebugExitRule(GrammarFileName, "orderbylist"); }
            return retval;

        }
        // $ANTLR end "orderbylist"

        partial void EnterRule_orderpropertyname();
        partial void LeaveRule_orderpropertyname();
        // $ANTLR start "orderpropertyname"
        // Querys\\NdQuery.g3:78:1: orderpropertyname : propertyname ( -> ^( ASC[\"asc\"] propertyname ) | ( SPACE (op= ASC |op= DESC ) ) -> ^( $op propertyname ) ) ;
        [GrammarRule("orderpropertyname")]
        private AstParserRuleReturnScope<CommonTree, CommonToken> orderpropertyname()
        {
            EnterRule_orderpropertyname();
            EnterRule("orderpropertyname", 18);
            TraceIn("orderpropertyname", 18);
            AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
            retval.Start = (CommonToken)input.LT(1);

            CommonTree root_0 = default(CommonTree);

            CommonToken op = default(CommonToken);
            CommonToken SPACE85 = default(CommonToken);
            AstParserRuleReturnScope<CommonTree, CommonToken> propertyname84 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

            CommonTree op_tree = default(CommonTree);
            CommonTree SPACE85_tree = default(CommonTree);
            RewriteRuleITokenStream stream_SPACE = new RewriteRuleITokenStream(adaptor, "token SPACE");
            RewriteRuleITokenStream stream_ASC = new RewriteRuleITokenStream(adaptor, "token ASC");
            RewriteRuleITokenStream stream_DESC = new RewriteRuleITokenStream(adaptor, "token DESC");
            RewriteRuleSubtreeStream stream_propertyname = new RewriteRuleSubtreeStream(adaptor, "rule propertyname");
            try
            {
                DebugEnterRule(GrammarFileName, "orderpropertyname");
                DebugLocation(78, 3);
                try
                {
                    // Querys\\NdQuery.g3:79:2: ( propertyname ( -> ^( ASC[\"asc\"] propertyname ) | ( SPACE (op= ASC |op= DESC ) ) -> ^( $op propertyname ) ) )
                    DebugEnterAlt(1);
                    // Querys\\NdQuery.g3:79:4: propertyname ( -> ^( ASC[\"asc\"] propertyname ) | ( SPACE (op= ASC |op= DESC ) ) -> ^( $op propertyname ) )
                    {
                        DebugLocation(79, 4);
                        PushFollow(Follow._propertyname_in_orderpropertyname587);
                        propertyname84 = propertyname();
                        PopFollow();

                        stream_propertyname.Add(propertyname84.Tree);
                        DebugLocation(79, 17);
                        // Querys\\NdQuery.g3:79:17: ( -> ^( ASC[\"asc\"] propertyname ) | ( SPACE (op= ASC |op= DESC ) ) -> ^( $op propertyname ) )
                        int alt35 = 2;
                        try
                        {
                            DebugEnterSubRule(35);
                            try
                            {
                                DebugEnterDecision(35, false);
                                int LA35_1 = input.LA(1);

                                if ((LA35_1 == SPACE))
                                {
                                    int LA35_2 = input.LA(2);

                                    if ((LA35_2 == 54))
                                    {
                                        alt35 = 1;
                                    }
                                    else if ((LA35_2 == ASC || LA35_2 == DESC))
                                    {
                                        alt35 = 2;
                                    }
                                    else
                                    {
                                        NoViableAltException nvae = new NoViableAltException("", 35, 1, input, 2);
                                        DebugRecognitionException(nvae);
                                        throw nvae;
                                    }
                                }
                                else if ((LA35_1 == EOF || LA35_1 == FILTER || LA35_1 == INLINECOUNT || (LA35_1 >= ORDERBY && LA35_1 <= SELECT) || LA35_1 == SKIP || LA35_1 == TOP || LA35_1 == 51 || LA35_1 == 54))
                                {
                                    alt35 = 1;
                                }
                                else
                                {
                                    NoViableAltException nvae = new NoViableAltException("", 35, 0, input, 1);
                                    DebugRecognitionException(nvae);
                                    throw nvae;
                                }
                            }
                            finally { DebugExitDecision(35); }
                            switch (alt35)
                            {
                                case 1:
                                    DebugEnterAlt(1);
                                    // Querys\\NdQuery.g3:80:4: 
                                    {

                                        {
                                            // AST REWRITE
                                            // elements: propertyname
                                            // token labels: 
                                            // rule labels: retval
                                            // token list labels: 
                                            // rule list labels: 
                                            // wildcard labels: 
                                            retval.Tree = root_0;
                                            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.Tree : null);

                                            root_0 = (CommonTree)adaptor.Nil();
                                            // 80:4: -> ^( ASC[\"asc\"] propertyname )
                                            {
                                                DebugLocation(80, 7);
                                                // Querys\\NdQuery.g3:80:7: ^( ASC[\"asc\"] propertyname )
                                                {
                                                    CommonTree root_1 = (CommonTree)adaptor.Nil();
                                                    DebugLocation(80, 9);
                                                    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ASC, "asc"), root_1);

                                                    DebugLocation(80, 20);
                                                    adaptor.AddChild(root_1, stream_propertyname.NextTree());

                                                    adaptor.AddChild(root_0, root_1);
                                                }

                                            }

                                            retval.Tree = root_0;
                                        }

                                    }
                                    break;
                                case 2:
                                    DebugEnterAlt(2);
                                    // Querys\\NdQuery.g3:81:6: ( SPACE (op= ASC |op= DESC ) )
                                    {
                                        DebugLocation(81, 6);
                                        // Querys\\NdQuery.g3:81:6: ( SPACE (op= ASC |op= DESC ) )
                                        DebugEnterAlt(1);
                                        // Querys\\NdQuery.g3:81:7: SPACE (op= ASC |op= DESC )
                                        {
                                            DebugLocation(81, 7);
                                            SPACE85 = (CommonToken)Match(input, SPACE, Follow._SPACE_in_orderpropertyname609);
                                            stream_SPACE.Add(SPACE85);

                                            DebugLocation(81, 13);
                                            // Querys\\NdQuery.g3:81:13: (op= ASC |op= DESC )
                                            int alt34 = 2;
                                            try
                                            {
                                                DebugEnterSubRule(34);
                                                try
                                                {
                                                    DebugEnterDecision(34, false);
                                                    int LA34_1 = input.LA(1);

                                                    if ((LA34_1 == ASC))
                                                    {
                                                        alt34 = 1;
                                                    }
                                                    else if ((LA34_1 == DESC))
                                                    {
                                                        alt34 = 2;
                                                    }
                                                    else
                                                    {
                                                        NoViableAltException nvae = new NoViableAltException("", 34, 0, input, 1);
                                                        DebugRecognitionException(nvae);
                                                        throw nvae;
                                                    }
                                                }
                                                finally { DebugExitDecision(34); }
                                                switch (alt34)
                                                {
                                                    case 1:
                                                        DebugEnterAlt(1);
                                                        // Querys\\NdQuery.g3:81:14: op= ASC
                                                        {
                                                            DebugLocation(81, 16);
                                                            op = (CommonToken)Match(input, ASC, Follow._ASC_in_orderpropertyname614);
                                                            stream_ASC.Add(op);


                                                        }
                                                        break;
                                                    case 2:
                                                        DebugEnterAlt(2);
                                                        // Querys\\NdQuery.g3:81:23: op= DESC
                                                        {
                                                            DebugLocation(81, 25);
                                                            op = (CommonToken)Match(input, DESC, Follow._DESC_in_orderpropertyname620);
                                                            stream_DESC.Add(op);


                                                        }
                                                        break;

                                                }
                                            }
                                            finally { DebugExitSubRule(34); }


                                        }



                                        {
                                            // AST REWRITE
                                            // elements: op, propertyname
                                            // token labels: op
                                            // rule labels: retval
                                            // token list labels: 
                                            // rule list labels: 
                                            // wildcard labels: 
                                            retval.Tree = root_0;
                                            RewriteRuleITokenStream stream_op = new RewriteRuleITokenStream(adaptor, "token op", op);
                                            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.Tree : null);

                                            root_0 = (CommonTree)adaptor.Nil();
                                            // 81:33: -> ^( $op propertyname )
                                            {
                                                DebugLocation(81, 36);
                                                // Querys\\NdQuery.g3:81:36: ^( $op propertyname )
                                                {
                                                    CommonTree root_1 = (CommonTree)adaptor.Nil();
                                                    DebugLocation(81, 39);
                                                    root_1 = (CommonTree)adaptor.BecomeRoot(stream_op.NextNode(), root_1);

                                                    DebugLocation(81, 42);
                                                    adaptor.AddChild(root_1, stream_propertyname.NextTree());

                                                    adaptor.AddChild(root_0, root_1);
                                                }

                                            }

                                            retval.Tree = root_0;
                                        }

                                    }
                                    break;

                            }
                        }
                        finally { DebugExitSubRule(35); }


                    }

                    retval.Stop = (CommonToken)input.LT(-1);

                    retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

                }
                catch (RecognitionException re)
                {
                    ReportError(re);
                    Recover(input, re);
                    retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

                }
                finally
                {
                    TraceOut("orderpropertyname", 18);
                    LeaveRule("orderpropertyname", 18);
                    LeaveRule_orderpropertyname();
                }
                DebugLocation(82, 3);
            }
            finally { DebugExitRule(GrammarFileName, "orderpropertyname"); }
            return retval;

        }
        // $ANTLR end "orderpropertyname"

        partial void EnterRule_constant();
        partial void LeaveRule_constant();
        // $ANTLR start "constant"
        // Querys\\NdQuery.g3:84:1: constant : ( INT ^| BOOL ^| STRING ^| DATETIME ^| LONG ^| SINGLE ^| DOUBLE ^| GUID ^| BYTE ^| NULL ^) ;
        [GrammarRule("constant")]
        private AstParserRuleReturnScope<CommonTree, CommonToken> constant()
        {
            EnterRule_constant();
            EnterRule("constant", 19);
            TraceIn("constant", 19);
            AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
            retval.Start = (CommonToken)input.LT(1);

            CommonTree root_0 = default(CommonTree);

            CommonToken INT86 = default(CommonToken);
            CommonToken BOOL87 = default(CommonToken);
            CommonToken STRING88 = default(CommonToken);
            CommonToken DATETIME89 = default(CommonToken);
            CommonToken LONG90 = default(CommonToken);
            CommonToken SINGLE91 = default(CommonToken);
            CommonToken DOUBLE92 = default(CommonToken);
            CommonToken GUID93 = default(CommonToken);
            CommonToken BYTE94 = default(CommonToken);
            CommonToken NULL95 = default(CommonToken);

            CommonTree INT86_tree = default(CommonTree);
            CommonTree BOOL87_tree = default(CommonTree);
            CommonTree STRING88_tree = default(CommonTree);
            CommonTree DATETIME89_tree = default(CommonTree);
            CommonTree LONG90_tree = default(CommonTree);
            CommonTree SINGLE91_tree = default(CommonTree);
            CommonTree DOUBLE92_tree = default(CommonTree);
            CommonTree GUID93_tree = default(CommonTree);
            CommonTree BYTE94_tree = default(CommonTree);
            CommonTree NULL95_tree = default(CommonTree);
            try
            {
                DebugEnterRule(GrammarFileName, "constant");
                DebugLocation(84, 98);
                try
                {
                    // Querys\\NdQuery.g3:84:9: ( ( INT ^| BOOL ^| STRING ^| DATETIME ^| LONG ^| SINGLE ^| DOUBLE ^| GUID ^| BYTE ^| NULL ^) )
                    DebugEnterAlt(1);
                    // Querys\\NdQuery.g3:84:11: ( INT ^| BOOL ^| STRING ^| DATETIME ^| LONG ^| SINGLE ^| DOUBLE ^| GUID ^| BYTE ^| NULL ^)
                    {
                        root_0 = (CommonTree)adaptor.Nil();

                        DebugLocation(84, 11);
                        // Querys\\NdQuery.g3:84:11: ( INT ^| BOOL ^| STRING ^| DATETIME ^| LONG ^| SINGLE ^| DOUBLE ^| GUID ^| BYTE ^| NULL ^)
                        int alt36 = 10;
                        try
                        {
                            DebugEnterSubRule(36);
                            try
                            {
                                DebugEnterDecision(36, false);
                                switch (input.LA(1))
                                {
                                    case INT:
                                        {
                                            alt36 = 1;
                                        }
                                        break;
                                    case BOOL:
                                        {
                                            alt36 = 2;
                                        }
                                        break;
                                    case STRING:
                                        {
                                            alt36 = 3;
                                        }
                                        break;
                                    case DATETIME:
                                        {
                                            alt36 = 4;
                                        }
                                        break;
                                    case LONG:
                                        {
                                            alt36 = 5;
                                        }
                                        break;
                                    case SINGLE:
                                        {
                                            alt36 = 6;
                                        }
                                        break;
                                    case DOUBLE:
                                        {
                                            alt36 = 7;
                                        }
                                        break;
                                    case GUID:
                                        {
                                            alt36 = 8;
                                        }
                                        break;
                                    case BYTE:
                                        {
                                            alt36 = 9;
                                        }
                                        break;
                                    case NULL:
                                        {
                                            alt36 = 10;
                                        }
                                        break;
                                    default:
                                        {
                                            NoViableAltException nvae = new NoViableAltException("", 36, 0, input, 1);
                                            DebugRecognitionException(nvae);
                                            throw nvae;
                                        }
                                }

                            }
                            finally { DebugExitDecision(36); }
                            switch (alt36)
                            {
                                case 1:
                                    DebugEnterAlt(1);
                                    // Querys\\NdQuery.g3:84:12: INT ^
                                    {
                                        DebugLocation(84, 15);
                                        INT86 = (CommonToken)Match(input, INT, Follow._INT_in_constant644);
                                        INT86_tree = (CommonTree)adaptor.Create(INT86);
                                        root_0 = (CommonTree)adaptor.BecomeRoot(INT86_tree, root_0);

                                    }
                                    break;
                                case 2:
                                    DebugEnterAlt(2);
                                    // Querys\\NdQuery.g3:84:19: BOOL ^
                                    {
                                        DebugLocation(84, 23);
                                        BOOL87 = (CommonToken)Match(input, BOOL, Follow._BOOL_in_constant649);
                                        BOOL87_tree = (CommonTree)adaptor.Create(BOOL87);
                                        root_0 = (CommonTree)adaptor.BecomeRoot(BOOL87_tree, root_0);

                                    }
                                    break;
                                case 3:
                                    DebugEnterAlt(3);
                                    // Querys\\NdQuery.g3:84:27: STRING ^
                                    {
                                        DebugLocation(84, 33);
                                        STRING88 = (CommonToken)Match(input, STRING, Follow._STRING_in_constant654);
                                        STRING88_tree = (CommonTree)adaptor.Create(STRING88);
                                        root_0 = (CommonTree)adaptor.BecomeRoot(STRING88_tree, root_0);

                                    }
                                    break;
                                case 4:
                                    DebugEnterAlt(4);
                                    // Querys\\NdQuery.g3:84:37: DATETIME ^
                                    {
                                        DebugLocation(84, 45);
                                        DATETIME89 = (CommonToken)Match(input, DATETIME, Follow._DATETIME_in_constant659);
                                        DATETIME89_tree = (CommonTree)adaptor.Create(DATETIME89);
                                        root_0 = (CommonTree)adaptor.BecomeRoot(DATETIME89_tree, root_0);

                                    }
                                    break;
                                case 5:
                                    DebugEnterAlt(5);
                                    // Querys\\NdQuery.g3:84:49: LONG ^
                                    {
                                        DebugLocation(84, 53);
                                        LONG90 = (CommonToken)Match(input, LONG, Follow._LONG_in_constant664);
                                        LONG90_tree = (CommonTree)adaptor.Create(LONG90);
                                        root_0 = (CommonTree)adaptor.BecomeRoot(LONG90_tree, root_0);

                                    }
                                    break;
                                case 6:
                                    DebugEnterAlt(6);
                                    // Querys\\NdQuery.g3:84:57: SINGLE ^
                                    {
                                        DebugLocation(84, 63);
                                        SINGLE91 = (CommonToken)Match(input, SINGLE, Follow._SINGLE_in_constant669);
                                        SINGLE91_tree = (CommonTree)adaptor.Create(SINGLE91);
                                        root_0 = (CommonTree)adaptor.BecomeRoot(SINGLE91_tree, root_0);

                                    }
                                    break;
                                case 7:
                                    DebugEnterAlt(7);
                                    // Querys\\NdQuery.g3:84:67: DOUBLE ^
                                    {
                                        DebugLocation(84, 73);
                                        DOUBLE92 = (CommonToken)Match(input, DOUBLE, Follow._DOUBLE_in_constant674);
                                        DOUBLE92_tree = (CommonTree)adaptor.Create(DOUBLE92);
                                        root_0 = (CommonTree)adaptor.BecomeRoot(DOUBLE92_tree, root_0);

                                    }
                                    break;
                                case 8:
                                    DebugEnterAlt(8);
                                    // Querys\\NdQuery.g3:84:77: GUID ^
                                    {
                                        DebugLocation(84, 81);
                                        GUID93 = (CommonToken)Match(input, GUID, Follow._GUID_in_constant679);
                                        GUID93_tree = (CommonTree)adaptor.Create(GUID93);
                                        root_0 = (CommonTree)adaptor.BecomeRoot(GUID93_tree, root_0);

                                    }
                                    break;
                                case 9:
                                    DebugEnterAlt(9);
                                    // Querys\\NdQuery.g3:84:85: BYTE ^
                                    {
                                        DebugLocation(84, 89);
                                        BYTE94 = (CommonToken)Match(input, BYTE, Follow._BYTE_in_constant684);
                                        BYTE94_tree = (CommonTree)adaptor.Create(BYTE94);
                                        root_0 = (CommonTree)adaptor.BecomeRoot(BYTE94_tree, root_0);

                                    }
                                    break;
                                case 10:
                                    DebugEnterAlt(10);
                                    // Querys\\NdQuery.g3:84:93: NULL ^
                                    {
                                        DebugLocation(84, 97);
                                        NULL95 = (CommonToken)Match(input, NULL, Follow._NULL_in_constant689);
                                        NULL95_tree = (CommonTree)adaptor.Create(NULL95);
                                        root_0 = (CommonTree)adaptor.BecomeRoot(NULL95_tree, root_0);

                                    }
                                    break;

                            }
                        }
                        finally { DebugExitSubRule(36); }


                    }

                    retval.Stop = (CommonToken)input.LT(-1);

                    retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

                }
                catch (RecognitionException re)
                {
                    ReportError(re);
                    Recover(input, re);
                    retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

                }
                finally
                {
                    TraceOut("constant", 19);
                    LeaveRule("constant", 19);
                    LeaveRule_constant();
                }
                DebugLocation(84, 98);
            }
            finally { DebugExitRule(GrammarFileName, "constant"); }
            return retval;

        }
        // $ANTLR end "constant"

        partial void EnterRule_propertyname();
        partial void LeaveRule_propertyname();
        // $ANTLR start "propertyname"
        // Querys\\NdQuery.g3:86:1: propertyname : IDENTIFIER ;
        [GrammarRule("propertyname")]
        private AstParserRuleReturnScope<CommonTree, CommonToken> propertyname()
        {
            EnterRule_propertyname();
            EnterRule("propertyname", 20);
            TraceIn("propertyname", 20);
            AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
            retval.Start = (CommonToken)input.LT(1);

            CommonTree root_0 = default(CommonTree);

            CommonToken IDENTIFIER96 = default(CommonToken);

            CommonTree IDENTIFIER96_tree = default(CommonTree);
            try
            {
                DebugEnterRule(GrammarFileName, "propertyname");
                DebugLocation(86, 13);
                try
                {
                    // Querys\\NdQuery.g3:87:2: ( IDENTIFIER )
                    DebugEnterAlt(1);
                    // Querys\\NdQuery.g3:87:4: IDENTIFIER
                    {
                        root_0 = (CommonTree)adaptor.Nil();

                        DebugLocation(87, 4);
                        IDENTIFIER96 = (CommonToken)Match(input, IDENTIFIER, Follow._IDENTIFIER_in_propertyname701);
                        IDENTIFIER96_tree = (CommonTree)adaptor.Create(IDENTIFIER96);
                        adaptor.AddChild(root_0, IDENTIFIER96_tree);

                    }

                    retval.Stop = (CommonToken)input.LT(-1);

                    retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

                }
                catch (RecognitionException re)
                {
                    ReportError(re);
                    Recover(input, re);
                    retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

                }
                finally
                {
                    TraceOut("propertyname", 20);
                    LeaveRule("propertyname", 20);
                    LeaveRule_propertyname();
                }
                DebugLocation(87, 13);
            }
            finally { DebugExitRule(GrammarFileName, "propertyname"); }
            return retval;

        }
        // $ANTLR end "propertyname"

        partial void EnterRule_filteroperator();
        partial void LeaveRule_filteroperator();
        // $ANTLR start "filteroperator"
        // Querys\\NdQuery.g3:89:1: filteroperator : ( EQUALS | NOTEQUALS | GREATERTHAN | GREATERTHANOREQUAL | LESSTHAN | LESSTHANOREQUAL );
        [GrammarRule("filteroperator")]
        private AstParserRuleReturnScope<CommonTree, CommonToken> filteroperator()
        {
            EnterRule_filteroperator();
            EnterRule("filteroperator", 21);
            TraceIn("filteroperator", 21);
            AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
            retval.Start = (CommonToken)input.LT(1);

            CommonTree root_0 = default(CommonTree);

            CommonToken set97 = default(CommonToken);

            CommonTree set97_tree = default(CommonTree);
            try
            {
                DebugEnterRule(GrammarFileName, "filteroperator");
                DebugLocation(89, 85);
                try
                {
                    // Querys\\NdQuery.g3:90:2: ( EQUALS | NOTEQUALS | GREATERTHAN | GREATERTHANOREQUAL | LESSTHAN | LESSTHANOREQUAL )
                    DebugEnterAlt(1);
                    // Querys\\NdQuery.g3:
                    {
                        root_0 = (CommonTree)adaptor.Nil();

                        DebugLocation(90, 2);

                        set97 = (CommonToken)input.LT(1);
                        if (input.LA(1) == EQUALS || (input.LA(1) >= GREATERTHAN && input.LA(1) <= GREATERTHANOREQUAL) || (input.LA(1) >= LESSTHAN && input.LA(1) <= LESSTHANOREQUAL) || input.LA(1) == NOTEQUALS)
                        {
                            input.Consume();
                            adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set97));
                            state.errorRecovery = false;
                        }
                        else
                        {
                            MismatchedSetException mse = new MismatchedSetException(null, input);
                            DebugRecognitionException(mse);
                            throw mse;
                        }


                    }

                    retval.Stop = (CommonToken)input.LT(-1);

                    retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

                }
                catch (RecognitionException re)
                {
                    ReportError(re);
                    Recover(input, re);
                    retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

                }
                finally
                {
                    TraceOut("filteroperator", 21);
                    LeaveRule("filteroperator", 21);
                    LeaveRule_filteroperator();
                }
                DebugLocation(90, 85);
            }
            finally { DebugExitRule(GrammarFileName, "filteroperator"); }
            return retval;

        }
        // $ANTLR end "filteroperator"
        #endregion Rules


        #region Follow sets
        private static class Follow
        {
            public static readonly BitSet _param_in_prog73 = new BitSet(new ulong[] { 0xA0B0002020002UL });
            public static readonly BitSet _51_in_prog76 = new BitSet(new ulong[] { 0x20B0002020000UL });
            public static readonly BitSet _param_in_prog79 = new BitSet(new ulong[] { 0xA0B0002020002UL });
            public static readonly BitSet _orderby_in_param92 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _top_in_param96 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _skip_in_param100 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _filter_in_param104 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _select_in_param108 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _inlinecount_in_param112 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _SKIP_in_skip123 = new BitSet(new ulong[] { 0x4000000UL });
            public static readonly BitSet _INT_in_skip126 = new BitSet(new ulong[] { 0x4000002UL });
            public static readonly BitSet _TOP_in_top137 = new BitSet(new ulong[] { 0x4000000UL });
            public static readonly BitSet _INT_in_top140 = new BitSet(new ulong[] { 0x4000002UL });
            public static readonly BitSet _FILTER_in_filter151 = new BitSet(new ulong[] { 0x10E42424906B00UL });
            public static readonly BitSet _filterexpression_in_filter154 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _SELECT_in_select165 = new BitSet(new ulong[] { 0x800000UL });
            public static readonly BitSet _propertyname_in_select168 = new BitSet(new ulong[] { 0x40100000000002UL });
            public static readonly BitSet _SPACE_in_select171 = new BitSet(new ulong[] { 0x40000000000000UL });
            public static readonly BitSet _54_in_select174 = new BitSet(new ulong[] { 0x100000800000UL });
            public static readonly BitSet _SPACE_in_select176 = new BitSet(new ulong[] { 0x800000UL });
            public static readonly BitSet _propertyname_in_select179 = new BitSet(new ulong[] { 0x40100000000002UL });
            public static readonly BitSet _INLINECOUNT_in_inlinecount195 = new BitSet(new ulong[] { 0x10UL });
            public static readonly BitSet _ALLPAGES_in_inlinecount198 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _INLINECOUNT_in_inlinecount203 = new BitSet(new ulong[] { 0x200000000UL });
            public static readonly BitSet _NONE_in_inlinecount205 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _orexpression_in_filterexpression217 = new BitSet(new ulong[] { 0x100000000002UL });
            public static readonly BitSet _SPACE_in_filterexpression221 = new BitSet(new ulong[] { 0x8000000000UL });
            public static readonly BitSet _OR_in_filterexpression224 = new BitSet(new ulong[] { 0x100000000000UL });
            public static readonly BitSet _SPACE_in_filterexpression227 = new BitSet(new ulong[] { 0x10E42424906B00UL });
            public static readonly BitSet _orexpression_in_filterexpression230 = new BitSet(new ulong[] { 0x100000000002UL });
            public static readonly BitSet _andexpression_in_orexpression244 = new BitSet(new ulong[] { 0x100000000002UL });
            public static readonly BitSet _SPACE_in_orexpression248 = new BitSet(new ulong[] { 0x20UL });
            public static readonly BitSet _AND_in_orexpression251 = new BitSet(new ulong[] { 0x100000000000UL });
            public static readonly BitSet _SPACE_in_orexpression254 = new BitSet(new ulong[] { 0x10E42424906B00UL });
            public static readonly BitSet _andexpression_in_orexpression257 = new BitSet(new ulong[] { 0x100000000002UL });
            public static readonly BitSet _NOT_in_andexpression271 = new BitSet(new ulong[] { 0x100000000000UL });
            public static readonly BitSet _SPACE_in_andexpression274 = new BitSet(new ulong[] { 0x10E42024906B00UL });
            public static readonly BitSet _52_in_andexpression277 = new BitSet(new ulong[] { 0x10E42424906B00UL });
            public static readonly BitSet _filterexpression_in_andexpression279 = new BitSet(new ulong[] { 0x20000000000000UL });
            public static readonly BitSet _53_in_andexpression282 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _booleanexpression_in_andexpression286 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _52_in_andexpression294 = new BitSet(new ulong[] { 0x10E42424906B00UL });
            public static readonly BitSet _filterexpression_in_andexpression296 = new BitSet(new ulong[] { 0x20000000000000UL });
            public static readonly BitSet _53_in_andexpression299 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _booleanexpression_in_andexpression303 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _atom_in_booleanexpression319 = new BitSet(new ulong[] { 0x100000000002UL });
            public static readonly BitSet _SPACE_in_booleanexpression327 = new BitSet(new ulong[] { 0x8180C8000UL });
            public static readonly BitSet _EQUALS_in_booleanexpression332 = new BitSet(new ulong[] { 0x100000000000UL });
            public static readonly BitSet _NOTEQUALS_in_booleanexpression338 = new BitSet(new ulong[] { 0x100000000000UL });
            public static readonly BitSet _GREATERTHAN_in_booleanexpression344 = new BitSet(new ulong[] { 0x100000000000UL });
            public static readonly BitSet _GREATERTHANOREQUAL_in_booleanexpression350 = new BitSet(new ulong[] { 0x100000000000UL });
            public static readonly BitSet _LESSTHAN_in_booleanexpression356 = new BitSet(new ulong[] { 0x100000000000UL });
            public static readonly BitSet _LESSTHANOREQUAL_in_booleanexpression362 = new BitSet(new ulong[] { 0x100000000000UL });
            public static readonly BitSet _SPACE_in_booleanexpression365 = new BitSet(new ulong[] { 0xE42024906B00UL });
            public static readonly BitSet _atom_in_booleanexpression369 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _inexpression_in_atom419 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _functioncall_in_atom424 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _constant_in_atom429 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _propertyname_in_atom434 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _propertyname_in_inexpression444 = new BitSet(new ulong[] { 0x100000000000UL });
            public static readonly BitSet _SPACE_in_inexpression446 = new BitSet(new ulong[] { 0x1001000000UL });
            public static readonly BitSet _set_in_inexpression448 = new BitSet(new ulong[] { 0x10100000000000UL });
            public static readonly BitSet _SPACE_in_inexpression455 = new BitSet(new ulong[] { 0x10000000000000UL });
            public static readonly BitSet _52_in_inexpression457 = new BitSet(new ulong[] { 0x60542024102B00UL });
            public static readonly BitSet _SPACE_in_inexpression459 = new BitSet(new ulong[] { 0x60542024102B00UL });
            public static readonly BitSet _constant_in_inexpression462 = new BitSet(new ulong[] { 0x60100000000000UL });
            public static readonly BitSet _SPACE_in_inexpression466 = new BitSet(new ulong[] { 0x40000000000000UL });
            public static readonly BitSet _54_in_inexpression469 = new BitSet(new ulong[] { 0x542024102B00UL });
            public static readonly BitSet _SPACE_in_inexpression471 = new BitSet(new ulong[] { 0x442024102B00UL });
            public static readonly BitSet _constant_in_inexpression474 = new BitSet(new ulong[] { 0x60100000000000UL });
            public static readonly BitSet _SPACE_in_inexpression478 = new BitSet(new ulong[] { 0x20000000000000UL });
            public static readonly BitSet _53_in_inexpression481 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _function_in_functioncall492 = new BitSet(new ulong[] { 0x10100000000000UL });
            public static readonly BitSet _SPACE_in_functioncall495 = new BitSet(new ulong[] { 0x10000000000000UL });
            public static readonly BitSet _52_in_functioncall498 = new BitSet(new ulong[] { 0xF42024906B00UL });
            public static readonly BitSet _SPACE_in_functioncall499 = new BitSet(new ulong[] { 0xE42024906B00UL });
            public static readonly BitSet _atom_in_functioncall502 = new BitSet(new ulong[] { 0x60100000000000UL });
            public static readonly BitSet _SPACE_in_functioncall506 = new BitSet(new ulong[] { 0x40000000000000UL });
            public static readonly BitSet _54_in_functioncall509 = new BitSet(new ulong[] { 0x542024102B00UL });
            public static readonly BitSet _SPACE_in_functioncall511 = new BitSet(new ulong[] { 0x442024102B00UL });
            public static readonly BitSet _constant_in_functioncall514 = new BitSet(new ulong[] { 0x60100000000000UL });
            public static readonly BitSet _SPACE_in_functioncall518 = new BitSet(new ulong[] { 0x20000000000000UL });
            public static readonly BitSet _53_in_functioncall521 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _ORDERBY_in_orderby550 = new BitSet(new ulong[] { 0x800000UL });
            public static readonly BitSet _orderbylist_in_orderby553 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _orderpropertyname_in_orderbylist563 = new BitSet(new ulong[] { 0x40100000000002UL });
            public static readonly BitSet _SPACE_in_orderbylist566 = new BitSet(new ulong[] { 0x40000000000000UL });
            public static readonly BitSet _54_in_orderbylist569 = new BitSet(new ulong[] { 0x100000800000UL });
            public static readonly BitSet _SPACE_in_orderbylist573 = new BitSet(new ulong[] { 0x800000UL });
            public static readonly BitSet _orderpropertyname_in_orderbylist576 = new BitSet(new ulong[] { 0x40100000000002UL });
            public static readonly BitSet _propertyname_in_orderpropertyname587 = new BitSet(new ulong[] { 0x100000000002UL });
            public static readonly BitSet _SPACE_in_orderpropertyname609 = new BitSet(new ulong[] { 0x1040UL });
            public static readonly BitSet _ASC_in_orderpropertyname614 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _DESC_in_orderpropertyname620 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _INT_in_constant644 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _BOOL_in_constant649 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _STRING_in_constant654 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _DATETIME_in_constant659 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _LONG_in_constant664 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _SINGLE_in_constant669 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _DOUBLE_in_constant674 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _GUID_in_constant679 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _BYTE_in_constant684 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _NULL_in_constant689 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _IDENTIFIER_in_propertyname701 = new BitSet(new ulong[] { 0x2UL });
        }
        #endregion Follow sets
    }

} // namespace Avalon.Framework.Querys
